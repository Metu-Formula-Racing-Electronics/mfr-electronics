
adc_to_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007874  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007b50  08007b50  00017b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007b54  08007b54  00017b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08007b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000164  24000010  08007b68  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000174  08007b68  00020174  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e56a  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002d86  00000000  00000000  0003e5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000012c8  00000000  00000000  00041330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000011d0  00000000  00000000  000425f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000342b4  00000000  00000000  000437c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015713  00000000  00000000  00077a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015dd7b  00000000  00000000  0008d18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001eaf0a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005170  00000000  00000000  001eaf60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08007b28 	.word	0x08007b28

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08007b28 	.word	0x08007b28

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
    uint16_t AD_RES = 0;
 8000312:	2300      	movs	r3, #0
 8000314:	80fb      	strh	r3, [r7, #6]

    HAL_Init();
 8000316:	f000 fcd1 	bl	8000cbc <HAL_Init>
    SystemClock_Config();
 800031a:	f000 f84b 	bl	80003b4 <SystemClock_Config>
    MX_GPIO_Init();
 800031e:	f000 fa05 	bl	800072c <MX_GPIO_Init>
    MX_ADC1_Init();
 8000322:	f000 f8bf 	bl	80004a4 <MX_ADC1_Init>
    MX_TIM2_Init();
 8000326:	f000 f98b 	bl	8000640 <MX_TIM2_Init>
    MX_SPI1_Init();
 800032a:	f000 f933 	bl	8000594 <MX_SPI1_Init>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800032e:	2100      	movs	r1, #0
 8000330:	481b      	ldr	r0, [pc, #108]	; (80003a0 <main+0x94>)
 8000332:	f006 fbc9 	bl	8006ac8 <HAL_TIM_PWM_Start>
    // Calibrate The ADC On Power-Up For Better Accuracy
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_DIFFERENTIAL_ENDED);
 8000336:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <main+0x98>)
 8000338:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800033c:	481a      	ldr	r0, [pc, #104]	; (80003a8 <main+0x9c>)
 800033e:	f002 fb65 	bl	8002a0c <HAL_ADCEx_Calibration_Start>
    /*while(1){
    	HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_13);
    	HAL_Delay(300);
    }*/
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000342:	2201      	movs	r2, #1
 8000344:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000348:	4818      	ldr	r0, [pc, #96]	; (80003ac <main+0xa0>)
 800034a:	f002 ff31 	bl	80031b0 <HAL_GPIO_WritePin>
    while (1)
    {
       // Start ADC Conversion
        HAL_ADC_Start(&hadc1);
 800034e:	4816      	ldr	r0, [pc, #88]	; (80003a8 <main+0x9c>)
 8000350:	f001 fa34 	bl	80017bc <HAL_ADC_Start>
       // Poll ADC1 Perihperal & TimeOut = 1mSec
        HAL_ADC_PollForConversion(&hadc1, 1);
 8000354:	2101      	movs	r1, #1
 8000356:	4814      	ldr	r0, [pc, #80]	; (80003a8 <main+0x9c>)
 8000358:	f001 fafa 	bl	8001950 <HAL_ADC_PollForConversion>
       // Read The ADC Conversion Result & Map It To PWM DutyCycle
        AD_RES = HAL_ADC_GetValue(&hadc1);
 800035c:	4812      	ldr	r0, [pc, #72]	; (80003a8 <main+0x9c>)
 800035e:	f001 fbeb 	bl	8001b38 <HAL_ADC_GetValue>
 8000362:	4603      	mov	r3, r0
 8000364:	b29b      	uxth	r3, r3
 8000366:	80fb      	strh	r3, [r7, #6]
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800036e:	480f      	ldr	r0, [pc, #60]	; (80003ac <main+0xa0>)
 8000370:	f002 ff1e 	bl	80031b0 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi1,&AD_RES, 2, 200);
 8000374:	1db9      	adds	r1, r7, #6
 8000376:	23c8      	movs	r3, #200	; 0xc8
 8000378:	2202      	movs	r2, #2
 800037a:	480d      	ldr	r0, [pc, #52]	; (80003b0 <main+0xa4>)
 800037c:	f006 f810 	bl	80063a0 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000380:	2201      	movs	r2, #1
 8000382:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000386:	4809      	ldr	r0, [pc, #36]	; (80003ac <main+0xa0>)
 8000388:	f002 ff12 	bl	80031b0 <HAL_GPIO_WritePin>
        TIM2->CCR1 = (AD_RES<<4);
 800038c:	88fb      	ldrh	r3, [r7, #6]
 800038e:	011a      	lsls	r2, r3, #4
 8000390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000394:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_Delay(1000);
 8000396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039a:	f000 fd21 	bl	8000de0 <HAL_Delay>
        HAL_ADC_Start(&hadc1);
 800039e:	e7d6      	b.n	800034e <main+0x42>
 80003a0:	24000124 	.word	0x24000124
 80003a4:	47ff0000 	.word	0x47ff0000
 80003a8:	2400002c 	.word	0x2400002c
 80003ac:	58020c00 	.word	0x58020c00
 80003b0:	2400009c 	.word	0x2400009c

080003b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b09c      	sub	sp, #112	; 0x70
 80003b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003be:	224c      	movs	r2, #76	; 0x4c
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f007 fba8 	bl	8007b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2220      	movs	r2, #32
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f007 fba2 	bl	8007b18 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003d4:	2002      	movs	r0, #2
 80003d6:	f002 ff05 	bl	80031e4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003da:	2300      	movs	r3, #0
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	4b2f      	ldr	r3, [pc, #188]	; (800049c <SystemClock_Config+0xe8>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003e6:	4a2d      	ldr	r2, [pc, #180]	; (800049c <SystemClock_Config+0xe8>)
 80003e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b2b      	ldr	r3, [pc, #172]	; (800049c <SystemClock_Config+0xe8>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003fa:	bf00      	nop
 80003fc:	4b27      	ldr	r3, [pc, #156]	; (800049c <SystemClock_Config+0xe8>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000408:	d1f8      	bne.n	80003fc <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800040a:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <SystemClock_Config+0xec>)
 800040c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800040e:	4a24      	ldr	r2, [pc, #144]	; (80004a0 <SystemClock_Config+0xec>)
 8000410:	f023 0303 	bic.w	r3, r3, #3
 8000414:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000416:	2302      	movs	r3, #2
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800041a:	2301      	movs	r3, #1
 800041c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041e:	2340      	movs	r3, #64	; 0x40
 8000420:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000422:	2302      	movs	r3, #2
 8000424:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000426:	2300      	movs	r3, #0
 8000428:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800042a:	2304      	movs	r3, #4
 800042c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800042e:	230c      	movs	r3, #12
 8000430:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000432:	2302      	movs	r3, #2
 8000434:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000436:	2303      	movs	r3, #3
 8000438:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800043a:	2302      	movs	r3, #2
 800043c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800043e:	230c      	movs	r3, #12
 8000440:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000442:	2300      	movs	r3, #0
 8000444:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800044e:	4618      	mov	r0, r3
 8000450:	f002 ff02 	bl	8003258 <HAL_RCC_OscConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800045a:	f000 f9f1 	bl	8000840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045e:	233f      	movs	r3, #63	; 0x3f
 8000460:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000462:	2300      	movs	r3, #0
 8000464:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800046e:	2340      	movs	r3, #64	; 0x40
 8000470:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000472:	2340      	movs	r3, #64	; 0x40
 8000474:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800047a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800047c:	2340      	movs	r3, #64	; 0x40
 800047e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2101      	movs	r1, #1
 8000484:	4618      	mov	r0, r3
 8000486:	f003 fa93 	bl	80039b0 <HAL_RCC_ClockConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000490:	f000 f9d6 	bl	8000840 <Error_Handler>
  }
}
 8000494:	bf00      	nop
 8000496:	3770      	adds	r7, #112	; 0x70
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	58024800 	.word	0x58024800
 80004a0:	58024400 	.word	0x58024400

080004a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08c      	sub	sp, #48	; 0x30
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004b6:	463b      	mov	r3, r7
 80004b8:	2224      	movs	r2, #36	; 0x24
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f007 fb2b 	bl	8007b18 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004c2:	4b31      	ldr	r3, [pc, #196]	; (8000588 <MX_ADC1_Init+0xe4>)
 80004c4:	4a31      	ldr	r2, [pc, #196]	; (800058c <MX_ADC1_Init+0xe8>)
 80004c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004c8:	4b2f      	ldr	r3, [pc, #188]	; (8000588 <MX_ADC1_Init+0xe4>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80004ce:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <MX_ADC1_Init+0xe4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004d4:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <MX_ADC1_Init+0xe4>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004da:	4b2b      	ldr	r3, [pc, #172]	; (8000588 <MX_ADC1_Init+0xe4>)
 80004dc:	2204      	movs	r2, #4
 80004de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004e0:	4b29      	ldr	r3, [pc, #164]	; (8000588 <MX_ADC1_Init+0xe4>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e6:	4b28      	ldr	r3, [pc, #160]	; (8000588 <MX_ADC1_Init+0xe4>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80004ec:	4b26      	ldr	r3, [pc, #152]	; (8000588 <MX_ADC1_Init+0xe4>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f2:	4b25      	ldr	r3, [pc, #148]	; (8000588 <MX_ADC1_Init+0xe4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fa:	4b23      	ldr	r3, [pc, #140]	; (8000588 <MX_ADC1_Init+0xe4>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <MX_ADC1_Init+0xe4>)
 8000502:	2200      	movs	r2, #0
 8000504:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <MX_ADC1_Init+0xe4>)
 8000508:	2200      	movs	r2, #0
 800050a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800050c:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <MX_ADC1_Init+0xe4>)
 800050e:	2200      	movs	r2, #0
 8000510:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <MX_ADC1_Init+0xe4>)
 8000514:	2200      	movs	r2, #0
 8000516:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <MX_ADC1_Init+0xe4>)
 800051a:	2200      	movs	r2, #0
 800051c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000520:	4819      	ldr	r0, [pc, #100]	; (8000588 <MX_ADC1_Init+0xe4>)
 8000522:	f000 ff43 	bl	80013ac <HAL_ADC_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800052c:	f000 f988 	bl	8000840 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000530:	2300      	movs	r3, #0
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000538:	4619      	mov	r1, r3
 800053a:	4813      	ldr	r0, [pc, #76]	; (8000588 <MX_ADC1_Init+0xe4>)
 800053c:	f002 faca 	bl	8002ad4 <HAL_ADCEx_MultiModeConfigChannel>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000546:	f000 f97b 	bl	8000840 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_ADC1_Init+0xec>)
 800054c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800054e:	2306      	movs	r3, #6
 8000550:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000556:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800055a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800055c:	2304      	movs	r3, #4
 800055e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056a:	463b      	mov	r3, r7
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <MX_ADC1_Init+0xe4>)
 8000570:	f001 faf0 	bl	8001b54 <HAL_ADC_ConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800057a:	f000 f961 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	3730      	adds	r7, #48	; 0x30
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	2400002c 	.word	0x2400002c
 800058c:	40022000 	.word	0x40022000
 8000590:	19200040 	.word	0x19200040

08000594 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <MX_SPI1_Init+0xa4>)
 800059a:	4a28      	ldr	r2, [pc, #160]	; (800063c <MX_SPI1_Init+0xa8>)
 800059c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800059e:	4b26      	ldr	r3, [pc, #152]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005a6:	4b24      	ldr	r3, [pc, #144]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005ae:	2207      	movs	r2, #7
 80005b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005b2:	4b21      	ldr	r3, [pc, #132]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005be:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005c8:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80005cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80005e6:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_SPI1_Init+0xa4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_SPI1_Init+0xa4>)
 8000600:	2200      	movs	r2, #0
 8000602:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_SPI1_Init+0xa4>)
 8000606:	2200      	movs	r2, #0
 8000608:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <MX_SPI1_Init+0xa4>)
 800060c:	2200      	movs	r2, #0
 800060e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_SPI1_Init+0xa4>)
 8000612:	2200      	movs	r2, #0
 8000614:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <MX_SPI1_Init+0xa4>)
 8000618:	2200      	movs	r2, #0
 800061a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_SPI1_Init+0xa4>)
 800061e:	2200      	movs	r2, #0
 8000620:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_SPI1_Init+0xa4>)
 8000624:	f005 fdb6 	bl	8006194 <HAL_SPI_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800062e:	f000 f907 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2400009c 	.word	0x2400009c
 800063c:	40013000 	.word	0x40013000

08000640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08e      	sub	sp, #56	; 0x38
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000672:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <MX_TIM2_Init+0xe8>)
 8000674:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000678:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <MX_TIM2_Init+0xe8>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <MX_TIM2_Init+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <MX_TIM2_Init+0xe8>)
 8000688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800068c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_TIM2_Init+0xe8>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <MX_TIM2_Init+0xe8>)
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800069a:	4823      	ldr	r0, [pc, #140]	; (8000728 <MX_TIM2_Init+0xe8>)
 800069c:	f006 f95b 	bl	8006956 <HAL_TIM_Base_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80006a6:	f000 f8cb 	bl	8000840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b4:	4619      	mov	r1, r3
 80006b6:	481c      	ldr	r0, [pc, #112]	; (8000728 <MX_TIM2_Init+0xe8>)
 80006b8:	f006 fc36 	bl	8006f28 <HAL_TIM_ConfigClockSource>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80006c2:	f000 f8bd 	bl	8000840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006c6:	4818      	ldr	r0, [pc, #96]	; (8000728 <MX_TIM2_Init+0xe8>)
 80006c8:	f006 f99c 	bl	8006a04 <HAL_TIM_PWM_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80006d2:	f000 f8b5 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <MX_TIM2_Init+0xe8>)
 80006e6:	f007 f957 	bl	8007998 <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80006f0:	f000 f8a6 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f4:	2360      	movs	r3, #96	; 0x60
 80006f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	4619      	mov	r1, r3
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <MX_TIM2_Init+0xe8>)
 800070c:	f006 faf8 	bl	8006d00 <HAL_TIM_PWM_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000716:	f000 f893 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800071a:	4803      	ldr	r0, [pc, #12]	; (8000728 <MX_TIM2_Init+0xe8>)
 800071c:	f000 f9ca 	bl	8000ab4 <HAL_TIM_MspPostInit>

}
 8000720:	bf00      	nop
 8000722:	3738      	adds	r7, #56	; 0x38
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	24000124 	.word	0x24000124

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	4b3c      	ldr	r3, [pc, #240]	; (8000834 <MX_GPIO_Init+0x108>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a3a      	ldr	r2, [pc, #232]	; (8000834 <MX_GPIO_Init+0x108>)
 800074a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b38      	ldr	r3, [pc, #224]	; (8000834 <MX_GPIO_Init+0x108>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	4b34      	ldr	r3, [pc, #208]	; (8000834 <MX_GPIO_Init+0x108>)
 8000762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000766:	4a33      	ldr	r2, [pc, #204]	; (8000834 <MX_GPIO_Init+0x108>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000770:	4b30      	ldr	r3, [pc, #192]	; (8000834 <MX_GPIO_Init+0x108>)
 8000772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077e:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <MX_GPIO_Init+0x108>)
 8000780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000784:	4a2b      	ldr	r2, [pc, #172]	; (8000834 <MX_GPIO_Init+0x108>)
 8000786:	f043 0320 	orr.w	r3, r3, #32
 800078a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <MX_GPIO_Init+0x108>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	f003 0320 	and.w	r3, r3, #32
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079c:	4b25      	ldr	r3, [pc, #148]	; (8000834 <MX_GPIO_Init+0x108>)
 800079e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a2:	4a24      	ldr	r2, [pc, #144]	; (8000834 <MX_GPIO_Init+0x108>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_GPIO_Init+0x108>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <MX_GPIO_Init+0x108>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c0:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <MX_GPIO_Init+0x108>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_GPIO_Init+0x108>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d0:	f003 0302 	and.w	r3, r3, #2
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007de:	4816      	ldr	r0, [pc, #88]	; (8000838 <MX_GPIO_Init+0x10c>)
 80007e0:	f002 fce6 	bl	80031b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ea:	4814      	ldr	r0, [pc, #80]	; (800083c <MX_GPIO_Init+0x110>)
 80007ec:	f002 fce0 	bl	80031b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480b      	ldr	r0, [pc, #44]	; (8000838 <MX_GPIO_Init+0x10c>)
 800080a:	f002 fb29 	bl	8002e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800080e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_GPIO_Init+0x110>)
 8000828:	f002 fb1a 	bl	8002e60 <HAL_GPIO_Init>

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	58024400 	.word	0x58024400
 8000838:	58021400 	.word	0x58021400
 800083c:	58020c00 	.word	0x58020c00

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_MspInit+0x30>)
 8000854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000858:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_MspInit+0x30>)
 800085a:	f043 0302 	orr.w	r3, r3, #2
 800085e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_MspInit+0x30>)
 8000864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	58024400 	.word	0x58024400

08000880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0b6      	sub	sp, #216	; 0xd8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	22b4      	movs	r2, #180	; 0xb4
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f007 f939 	bl	8007b18 <memset>
  if(hadc->Instance==ADC1)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a2a      	ldr	r2, [pc, #168]	; (8000954 <HAL_ADC_MspInit+0xd4>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d14d      	bne.n	800094c <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80008b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80008b6:	2304      	movs	r3, #4
 80008b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80008ba:	230c      	movs	r3, #12
 80008bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 80008be:	2305      	movs	r3, #5
 80008c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008ca:	23c0      	movs	r3, #192	; 0xc0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 fbc5 	bl	8004070 <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80008ec:	f7ff ffa8 	bl	8000840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <HAL_ADC_MspInit+0xd8>)
 80008f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008f6:	4a18      	ldr	r2, [pc, #96]	; (8000958 <HAL_ADC_MspInit+0xd8>)
 80008f8:	f043 0320 	orr.w	r3, r3, #32
 80008fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_ADC_MspInit+0xd8>)
 8000902:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000906:	f003 0320 	and.w	r3, r3, #32
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_ADC_MspInit+0xd8>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	4a10      	ldr	r2, [pc, #64]	; (8000958 <HAL_ADC_MspInit+0xd8>)
 8000916:	f043 0320 	orr.w	r3, r3, #32
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_ADC_MspInit+0xd8>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	f003 0320 	and.w	r3, r3, #32
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000934:	2303      	movs	r3, #3
 8000936:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000940:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000944:	4619      	mov	r1, r3
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <HAL_ADC_MspInit+0xdc>)
 8000948:	f002 fa8a 	bl	8002e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	37d8      	adds	r7, #216	; 0xd8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40022000 	.word	0x40022000
 8000958:	58024400 	.word	0x58024400
 800095c:	58021400 	.word	0x58021400

08000960 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b0b8      	sub	sp, #224	; 0xe0
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	22b4      	movs	r2, #180	; 0xb4
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f007 f8c9 	bl	8007b18 <memset>
  if(hspi->Instance==SPI1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a36      	ldr	r2, [pc, #216]	; (8000a64 <HAL_SPI_MspInit+0x104>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d165      	bne.n	8000a5c <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000994:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000996:	2300      	movs	r3, #0
 8000998:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 fb66 	bl	8004070 <HAL_RCCEx_PeriphCLKConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80009aa:	f7ff ff49 	bl	8000840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <HAL_SPI_MspInit+0x108>)
 80009b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009b4:	4a2c      	ldr	r2, [pc, #176]	; (8000a68 <HAL_SPI_MspInit+0x108>)
 80009b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <HAL_SPI_MspInit+0x108>)
 80009c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <HAL_SPI_MspInit+0x108>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	4a25      	ldr	r2, [pc, #148]	; (8000a68 <HAL_SPI_MspInit+0x108>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <HAL_SPI_MspInit+0x108>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <HAL_SPI_MspInit+0x108>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	4a1d      	ldr	r2, [pc, #116]	; (8000a68 <HAL_SPI_MspInit+0x108>)
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fa:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <HAL_SPI_MspInit+0x108>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	f003 0302 	and.w	r3, r3, #2
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a08:	2360      	movs	r3, #96	; 0x60
 8000a0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a20:	2305      	movs	r3, #5
 8000a22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480f      	ldr	r0, [pc, #60]	; (8000a6c <HAL_SPI_MspInit+0x10c>)
 8000a2e:	f002 fa17 	bl	8002e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a32:	2320      	movs	r3, #32
 8000a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <HAL_SPI_MspInit+0x110>)
 8000a58:	f002 fa02 	bl	8002e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	37e0      	adds	r7, #224	; 0xe0
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40013000 	.word	0x40013000
 8000a68:	58024400 	.word	0x58024400
 8000a6c:	58020000 	.word	0x58020000
 8000a70:	58020400 	.word	0x58020400

08000a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a84:	d10e      	bne.n	8000aa4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a8c:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	58024400 	.word	0x58024400

08000ab4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad4:	d11e      	bne.n	8000b14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_TIM_MspPostInit+0x68>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_TIM_MspPostInit+0x68>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_TIM_MspPostInit+0x68>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af4:	2301      	movs	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <HAL_TIM_MspPostInit+0x6c>)
 8000b10:	f002 f9a6 	bl	8002e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	58024400 	.word	0x58024400
 8000b20:	58020000 	.word	0x58020000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f000 f916 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <SystemInit+0xd0>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a31      	ldr	r2, [pc, #196]	; (8000c48 <SystemInit+0xd0>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <SystemInit+0xd4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 030f 	and.w	r3, r3, #15
 8000b94:	2b06      	cmp	r3, #6
 8000b96:	d807      	bhi.n	8000ba8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b98:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <SystemInit+0xd4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f023 030f 	bic.w	r3, r3, #15
 8000ba0:	4a2a      	ldr	r2, [pc, #168]	; (8000c4c <SystemInit+0xd4>)
 8000ba2:	f043 0307 	orr.w	r3, r3, #7
 8000ba6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ba8:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <SystemInit+0xd8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <SystemInit+0xd8>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <SystemInit+0xd8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bba:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <SystemInit+0xd8>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4924      	ldr	r1, [pc, #144]	; (8000c50 <SystemInit+0xd8>)
 8000bc0:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <SystemInit+0xdc>)
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <SystemInit+0xd4>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d007      	beq.n	8000be2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <SystemInit+0xd4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f023 030f 	bic.w	r3, r3, #15
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <SystemInit+0xd4>)
 8000bdc:	f043 0307 	orr.w	r3, r3, #7
 8000be0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <SystemInit+0xd8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <SystemInit+0xd8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <SystemInit+0xd8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <SystemInit+0xd8>)
 8000bf6:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <SystemInit+0xe0>)
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <SystemInit+0xd8>)
 8000bfc:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <SystemInit+0xe4>)
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <SystemInit+0xd8>)
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <SystemInit+0xe8>)
 8000c04:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <SystemInit+0xd8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <SystemInit+0xd8>)
 8000c0e:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <SystemInit+0xe8>)
 8000c10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <SystemInit+0xd8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <SystemInit+0xd8>)
 8000c1a:	4a11      	ldr	r2, [pc, #68]	; (8000c60 <SystemInit+0xe8>)
 8000c1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <SystemInit+0xd8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <SystemInit+0xd8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <SystemInit+0xd8>)
 8000c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <SystemInit+0xd8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <SystemInit+0xec>)
 8000c38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c3c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00
 8000c4c:	52002000 	.word	0x52002000
 8000c50:	58024400 	.word	0x58024400
 8000c54:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c58:	02020200 	.word	0x02020200
 8000c5c:	01ff0000 	.word	0x01ff0000
 8000c60:	01010280 	.word	0x01010280
 8000c64:	52004000 	.word	0x52004000

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c6c:	f7ff ff84 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	; (8000ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	; (8000cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c96:	f006 ff1b 	bl	8007ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fb37 	bl	800030c <main>
  bx  lr
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000ca4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ca8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000cac:	08007b58 	.word	0x08007b58
  ldr r2, =_sbss
 8000cb0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000cb4:	24000174 	.word	0x24000174

08000cb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC3_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f002 f89a 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cc8:	f003 f828 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_Init+0x68>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	0a1b      	lsrs	r3, r3, #8
 8000cd4:	f003 030f 	and.w	r3, r3, #15
 8000cd8:	4913      	ldr	r1, [pc, #76]	; (8000d28 <HAL_Init+0x6c>)
 8000cda:	5ccb      	ldrb	r3, [r1, r3]
 8000cdc:	f003 031f 	and.w	r3, r3, #31
 8000ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_Init+0x68>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <HAL_Init+0x6c>)
 8000cf0:	5cd3      	ldrb	r3, [r2, r3]
 8000cf2:	f003 031f 	and.w	r3, r3, #31
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfc:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <HAL_Init+0x70>)
 8000cfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d00:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <HAL_Init+0x74>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d06:	200f      	movs	r0, #15
 8000d08:	f000 f814 	bl	8000d34 <HAL_InitTick>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e002      	b.n	8000d1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d16:	f7ff fd99 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	58024400 	.word	0x58024400
 8000d28:	08007b40 	.word	0x08007b40
 8000d2c:	24000004 	.word	0x24000004
 8000d30:	24000000 	.word	0x24000000

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_InitTick+0x60>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e021      	b.n	8000d8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <HAL_InitTick+0x64>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_InitTick+0x60>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 f871 	bl	8002e46 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d7c:	f002 f849 	bl	8002e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_InitTick+0x68>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2400000c 	.word	0x2400000c
 8000d98:	24000000 	.word	0x24000000
 8000d9c:	24000008 	.word	0x24000008

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2400000c 	.word	0x2400000c
 8000dc4:	24000170 	.word	0x24000170

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	24000170 	.word	0x24000170

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2400000c 	.word	0x2400000c

08000e28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	609a      	str	r2, [r3, #8]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	609a      	str	r2, [r3, #8]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3360      	adds	r3, #96	; 0x60
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <LL_ADC_SetOffset+0x60>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d10b      	bne.n	8000ecc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000eca:	e00b      	b.n	8000ee4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	430b      	orrs	r3, r1
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	371c      	adds	r7, #28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	58026000 	.word	0x58026000

08000ef4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3360      	adds	r3, #96	; 0x60
 8000f02:	461a      	mov	r2, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	f003 031f 	and.w	r3, r3, #31
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	431a      	orrs	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	611a      	str	r2, [r3, #16]
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d00e      	beq.n	8000f86 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3360      	adds	r3, #96	; 0x60
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	431a      	orrs	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	601a      	str	r2, [r3, #0]
  }
}
 8000f86:	bf00      	nop
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	58026000 	.word	0x58026000

08000f98 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <LL_ADC_SetOffsetSaturation+0x40>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d10e      	bne.n	8000fca <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3360      	adds	r3, #96	; 0x60
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8000fca:	bf00      	nop
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	58026000 	.word	0x58026000

08000fdc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4a0c      	ldr	r2, [pc, #48]	; (800101c <LL_ADC_SetOffsetSign+0x40>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d10e      	bne.n	800100e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3360      	adds	r3, #96	; 0x60
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	431a      	orrs	r2, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800100e:	bf00      	nop
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	58026000 	.word	0x58026000

08001020 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3360      	adds	r3, #96	; 0x60
 8001030:	461a      	mov	r2, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <LL_ADC_SetOffsetState+0x50>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d108      	bne.n	8001054 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001052:	e007      	b.n	8001064 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	431a      	orrs	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	58026000 	.word	0x58026000

08001074 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800109a:	b480      	push	{r7}
 800109c:	b087      	sub	sp, #28
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3330      	adds	r3, #48	; 0x30
 80010aa:	461a      	mov	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	4413      	add	r3, r2
 80010b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	211f      	movs	r1, #31
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	401a      	ands	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	0e9b      	lsrs	r3, r3, #26
 80010d2:	f003 011f 	and.w	r1, r3, #31
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	431a      	orrs	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010e6:	bf00      	nop
 80010e8:	371c      	adds	r7, #28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b087      	sub	sp, #28
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3314      	adds	r3, #20
 8001102:	461a      	mov	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	0e5b      	lsrs	r3, r3, #25
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	4413      	add	r3, r2
 8001110:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	0d1b      	lsrs	r3, r3, #20
 800111a:	f003 031f 	and.w	r3, r3, #31
 800111e:	2107      	movs	r1, #7
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	401a      	ands	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	0d1b      	lsrs	r3, r3, #20
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	431a      	orrs	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d115      	bne.n	8001188 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001168:	43db      	mvns	r3, r3
 800116a:	401a      	ands	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0318 	and.w	r3, r3, #24
 8001172:	4914      	ldr	r1, [pc, #80]	; (80011c4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001174:	40d9      	lsrs	r1, r3
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	400b      	ands	r3, r1
 800117a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800117e:	431a      	orrs	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001186:	e014      	b.n	80011b2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001194:	43db      	mvns	r3, r3
 8001196:	401a      	ands	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0318 	and.w	r3, r3, #24
 800119e:	4909      	ldr	r1, [pc, #36]	; (80011c4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80011a0:	40d9      	lsrs	r1, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	400b      	ands	r3, r1
 80011a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011aa:	431a      	orrs	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	58026000 	.word	0x58026000
 80011c4:	000fffff 	.word	0x000fffff

080011c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 031f 	and.w	r3, r3, #31
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <LL_ADC_DisableDeepPowerDown+0x20>)
 800120e:	4013      	ands	r3, r2
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6093      	str	r3, [r2, #8]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	5fffffc0 	.word	0x5fffffc0

08001224 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001238:	d101      	bne.n	800123e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <LL_ADC_EnableInternalRegulator+0x24>)
 800125a:	4013      	ands	r3, r2
 800125c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	6fffffc0 	.word	0x6fffffc0

08001274 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001288:	d101      	bne.n	800128e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <LL_ADC_Enable+0x24>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	7fffffc0 	.word	0x7fffffc0

080012c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <LL_ADC_Disable+0x24>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	f043 0202 	orr.w	r2, r3, #2
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	7fffffc0 	.word	0x7fffffc0

080012ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <LL_ADC_IsEnabled+0x18>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <LL_ADC_IsEnabled+0x1a>
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b02      	cmp	r3, #2
 8001324:	d101      	bne.n	800132a <LL_ADC_IsDisableOngoing+0x18>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <LL_ADC_IsDisableOngoing+0x1a>
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <LL_ADC_REG_StartConversion+0x24>)
 8001346:	4013      	ands	r3, r2
 8001348:	f043 0204 	orr.w	r2, r3, #4
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	7fffffc0 	.word	0x7fffffc0

08001360 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b04      	cmp	r3, #4
 8001372:	d101      	bne.n	8001378 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b08      	cmp	r3, #8
 8001398:	d101      	bne.n	800139e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e1ee      	b.n	80017a4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d109      	bne.n	80013e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fa53 	bl	8000880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff19 	bl	8001224 <LL_ADC_IsDeepPowerDownEnabled>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff feff 	bl	8001200 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff34 	bl	8001274 <LL_ADC_IsInternalRegulatorEnabled>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d114      	bne.n	800143c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff18 	bl	800124c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800141c:	4b8e      	ldr	r3, [pc, #568]	; (8001658 <HAL_ADC_Init+0x2ac>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	099b      	lsrs	r3, r3, #6
 8001422:	4a8e      	ldr	r2, [pc, #568]	; (800165c <HAL_ADC_Init+0x2b0>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	099b      	lsrs	r3, r3, #6
 800142a:	3301      	adds	r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800142e:	e002      	b.n	8001436 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	3b01      	subs	r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f9      	bne.n	8001430 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff17 	bl	8001274 <LL_ADC_IsInternalRegulatorEnabled>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10d      	bne.n	8001468 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001450:	f043 0210 	orr.w	r2, r3, #16
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800145c:	f043 0201 	orr.w	r2, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff77 	bl	8001360 <LL_ADC_REG_IsConversionOngoing>
 8001472:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	2b00      	cmp	r3, #0
 800147e:	f040 8188 	bne.w	8001792 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f040 8184 	bne.w	8001792 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001492:	f043 0202 	orr.w	r2, r3, #2
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff24 	bl	80012ec <LL_ADC_IsEnabled>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d136      	bne.n	8001518 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6c      	ldr	r2, [pc, #432]	; (8001660 <HAL_ADC_Init+0x2b4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d004      	beq.n	80014be <HAL_ADC_Init+0x112>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a6a      	ldr	r2, [pc, #424]	; (8001664 <HAL_ADC_Init+0x2b8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d10e      	bne.n	80014dc <HAL_ADC_Init+0x130>
 80014be:	4868      	ldr	r0, [pc, #416]	; (8001660 <HAL_ADC_Init+0x2b4>)
 80014c0:	f7ff ff14 	bl	80012ec <LL_ADC_IsEnabled>
 80014c4:	4604      	mov	r4, r0
 80014c6:	4867      	ldr	r0, [pc, #412]	; (8001664 <HAL_ADC_Init+0x2b8>)
 80014c8:	f7ff ff10 	bl	80012ec <LL_ADC_IsEnabled>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4323      	orrs	r3, r4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf0c      	ite	eq
 80014d4:	2301      	moveq	r3, #1
 80014d6:	2300      	movne	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	e008      	b.n	80014ee <HAL_ADC_Init+0x142>
 80014dc:	4862      	ldr	r0, [pc, #392]	; (8001668 <HAL_ADC_Init+0x2bc>)
 80014de:	f7ff ff05 	bl	80012ec <LL_ADC_IsEnabled>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d012      	beq.n	8001518 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a5a      	ldr	r2, [pc, #360]	; (8001660 <HAL_ADC_Init+0x2b4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d004      	beq.n	8001506 <HAL_ADC_Init+0x15a>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a58      	ldr	r2, [pc, #352]	; (8001664 <HAL_ADC_Init+0x2b8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_ADC_Init+0x15e>
 8001506:	4a59      	ldr	r2, [pc, #356]	; (800166c <HAL_ADC_Init+0x2c0>)
 8001508:	e000      	b.n	800150c <HAL_ADC_Init+0x160>
 800150a:	4a59      	ldr	r2, [pc, #356]	; (8001670 <HAL_ADC_Init+0x2c4>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4619      	mov	r1, r3
 8001512:	4610      	mov	r0, r2
 8001514:	f7ff fc88 	bl	8000e28 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a52      	ldr	r2, [pc, #328]	; (8001668 <HAL_ADC_Init+0x2bc>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d129      	bne.n	8001576 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7e5b      	ldrb	r3, [r3, #25]
 8001526:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800152c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001532:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b08      	cmp	r3, #8
 800153a:	d013      	beq.n	8001564 <HAL_ADC_Init+0x1b8>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d00d      	beq.n	8001560 <HAL_ADC_Init+0x1b4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b1c      	cmp	r3, #28
 800154a:	d007      	beq.n	800155c <HAL_ADC_Init+0x1b0>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b18      	cmp	r3, #24
 8001552:	d101      	bne.n	8001558 <HAL_ADC_Init+0x1ac>
 8001554:	2318      	movs	r3, #24
 8001556:	e006      	b.n	8001566 <HAL_ADC_Init+0x1ba>
 8001558:	2300      	movs	r3, #0
 800155a:	e004      	b.n	8001566 <HAL_ADC_Init+0x1ba>
 800155c:	2310      	movs	r3, #16
 800155e:	e002      	b.n	8001566 <HAL_ADC_Init+0x1ba>
 8001560:	2308      	movs	r3, #8
 8001562:	e000      	b.n	8001566 <HAL_ADC_Init+0x1ba>
 8001564:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001566:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	e00e      	b.n	8001594 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7e5b      	ldrb	r3, [r3, #25]
 800157a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001580:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001586:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d106      	bne.n	80015ac <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	3b01      	subs	r3, #1
 80015a4:	045b      	lsls	r3, r3, #17
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d009      	beq.n	80015c8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <HAL_ADC_Init+0x2bc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d115      	bne.n	80015fe <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <HAL_ADC_Init+0x2c8>)
 80015da:	4013      	ands	r3, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	69b9      	ldr	r1, [r7, #24]
 80015e2:	430b      	orrs	r3, r1
 80015e4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	611a      	str	r2, [r3, #16]
 80015fc:	e009      	b.n	8001612 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <HAL_ADC_Init+0x2cc>)
 8001606:	4013      	ands	r3, r2
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	69b9      	ldr	r1, [r7, #24]
 800160e:	430b      	orrs	r3, r1
 8001610:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fea2 	bl	8001360 <LL_ADC_REG_IsConversionOngoing>
 800161c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff feaf 	bl	8001386 <LL_ADC_INJ_IsConversionOngoing>
 8001628:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f040 808e 	bne.w	800174e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f040 808a 	bne.w	800174e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_ADC_Init+0x2bc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d11b      	bne.n	800167c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7e1b      	ldrb	r3, [r3, #24]
 8001648:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001650:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	e018      	b.n	800168a <HAL_ADC_Init+0x2de>
 8001658:	24000000 	.word	0x24000000
 800165c:	053e2d63 	.word	0x053e2d63
 8001660:	40022000 	.word	0x40022000
 8001664:	40022100 	.word	0x40022100
 8001668:	58026000 	.word	0x58026000
 800166c:	40022300 	.word	0x40022300
 8001670:	58026300 	.word	0x58026300
 8001674:	fff04007 	.word	0xfff04007
 8001678:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7e1b      	ldrb	r3, [r3, #24]
 8001680:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	4b46      	ldr	r3, [pc, #280]	; (80017ac <HAL_ADC_Init+0x400>)
 8001692:	4013      	ands	r3, r2
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	69b9      	ldr	r1, [r7, #24]
 800169a:	430b      	orrs	r3, r1
 800169c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d137      	bne.n	8001718 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a3f      	ldr	r2, [pc, #252]	; (80017b0 <HAL_ADC_Init+0x404>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d116      	bne.n	80016e6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <HAL_ADC_Init+0x408>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80016ca:	4311      	orrs	r1, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016d0:	4311      	orrs	r1, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80016d6:	430a      	orrs	r2, r1
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	611a      	str	r2, [r3, #16]
 80016e4:	e020      	b.n	8001728 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	4b32      	ldr	r3, [pc, #200]	; (80017b8 <HAL_ADC_Init+0x40c>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016f4:	3a01      	subs	r2, #1
 80016f6:	0411      	lsls	r1, r2, #16
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80016fc:	4311      	orrs	r1, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001702:	4311      	orrs	r1, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001708:	430a      	orrs	r2, r1
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	e007      	b.n	8001728 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <HAL_ADC_Init+0x404>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d002      	beq.n	800174e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f001 f819 	bl	8002780 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10c      	bne.n	8001770 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f023 010f 	bic.w	r1, r3, #15
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	1e5a      	subs	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	631a      	str	r2, [r3, #48]	; 0x30
 800176e:	e007      	b.n	8001780 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 020f 	bic.w	r2, r2, #15
 800177e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001784:	f023 0303 	bic.w	r3, r3, #3
 8001788:	f043 0201 	orr.w	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	661a      	str	r2, [r3, #96]	; 0x60
 8001790:	e007      	b.n	80017a2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	f043 0210 	orr.w	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3724      	adds	r7, #36	; 0x24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd90      	pop	{r4, r7, pc}
 80017ac:	ffffbffc 	.word	0xffffbffc
 80017b0:	58026000 	.word	0x58026000
 80017b4:	fc00f81f 	.word	0xfc00f81f
 80017b8:	fc00f81e 	.word	0xfc00f81e

080017bc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a5c      	ldr	r2, [pc, #368]	; (800193c <HAL_ADC_Start+0x180>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d004      	beq.n	80017d8 <HAL_ADC_Start+0x1c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a5b      	ldr	r2, [pc, #364]	; (8001940 <HAL_ADC_Start+0x184>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_Start+0x20>
 80017d8:	4b5a      	ldr	r3, [pc, #360]	; (8001944 <HAL_ADC_Start+0x188>)
 80017da:	e000      	b.n	80017de <HAL_ADC_Start+0x22>
 80017dc:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_ADC_Start+0x18c>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fcf2 	bl	80011c8 <LL_ADC_GetMultimode>
 80017e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fdb8 	bl	8001360 <LL_ADC_REG_IsConversionOngoing>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 809a 	bne.w	800192c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_ADC_Start+0x4a>
 8001802:	2302      	movs	r3, #2
 8001804:	e095      	b.n	8001932 <HAL_ADC_Start+0x176>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fecc 	bl	80025ac <ADC_Enable>
 8001814:	4603      	mov	r3, r0
 8001816:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 8081 	bne.w	8001922 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001824:	4b49      	ldr	r3, [pc, #292]	; (800194c <HAL_ADC_Start+0x190>)
 8001826:	4013      	ands	r3, r2
 8001828:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a42      	ldr	r2, [pc, #264]	; (8001940 <HAL_ADC_Start+0x184>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d002      	beq.n	8001840 <HAL_ADC_Start+0x84>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	e000      	b.n	8001842 <HAL_ADC_Start+0x86>
 8001840:	4b3e      	ldr	r3, [pc, #248]	; (800193c <HAL_ADC_Start+0x180>)
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	4293      	cmp	r3, r2
 8001848:	d002      	beq.n	8001850 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d105      	bne.n	800185c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001854:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001868:	d106      	bne.n	8001878 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800186e:	f023 0206 	bic.w	r2, r3, #6
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	665a      	str	r2, [r3, #100]	; 0x64
 8001876:	e002      	b.n	800187e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	221c      	movs	r2, #28
 8001884:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a2b      	ldr	r2, [pc, #172]	; (8001940 <HAL_ADC_Start+0x184>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d002      	beq.n	800189e <HAL_ADC_Start+0xe2>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	e000      	b.n	80018a0 <HAL_ADC_Start+0xe4>
 800189e:	4b27      	ldr	r3, [pc, #156]	; (800193c <HAL_ADC_Start+0x180>)
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d008      	beq.n	80018ba <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	2b05      	cmp	r3, #5
 80018b2:	d002      	beq.n	80018ba <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	2b09      	cmp	r3, #9
 80018b8:	d114      	bne.n	80018e4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fd2b 	bl	8001338 <LL_ADC_REG_StartConversion>
 80018e2:	e025      	b.n	8001930 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a12      	ldr	r2, [pc, #72]	; (8001940 <HAL_ADC_Start+0x184>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d002      	beq.n	8001900 <HAL_ADC_Start+0x144>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	e000      	b.n	8001902 <HAL_ADC_Start+0x146>
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_ADC_Start+0x180>)
 8001902:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00f      	beq.n	8001930 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001914:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001918:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	661a      	str	r2, [r3, #96]	; 0x60
 8001920:	e006      	b.n	8001930 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800192a:	e001      	b.n	8001930 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800192c:	2302      	movs	r3, #2
 800192e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001930:	7dfb      	ldrb	r3, [r7, #23]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40022000 	.word	0x40022000
 8001940:	40022100 	.word	0x40022100
 8001944:	40022300 	.word	0x40022300
 8001948:	58026300 	.word	0x58026300
 800194c:	fffff0fe 	.word	0xfffff0fe

08001950 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a72      	ldr	r2, [pc, #456]	; (8001b28 <HAL_ADC_PollForConversion+0x1d8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d004      	beq.n	800196e <HAL_ADC_PollForConversion+0x1e>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a70      	ldr	r2, [pc, #448]	; (8001b2c <HAL_ADC_PollForConversion+0x1dc>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_ADC_PollForConversion+0x22>
 800196e:	4b70      	ldr	r3, [pc, #448]	; (8001b30 <HAL_ADC_PollForConversion+0x1e0>)
 8001970:	e000      	b.n	8001974 <HAL_ADC_PollForConversion+0x24>
 8001972:	4b70      	ldr	r3, [pc, #448]	; (8001b34 <HAL_ADC_PollForConversion+0x1e4>)
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fc27 	bl	80011c8 <LL_ADC_GetMultimode>
 800197a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	2b08      	cmp	r3, #8
 8001982:	d102      	bne.n	800198a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001984:	2308      	movs	r3, #8
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	e037      	b.n	80019fa <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2b05      	cmp	r3, #5
 8001994:	d002      	beq.n	800199c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b09      	cmp	r3, #9
 800199a:	d111      	bne.n	80019c0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ae:	f043 0220 	orr.w	r2, r3, #32
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0b1      	b.n	8001b1e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019ba:	2304      	movs	r3, #4
 80019bc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80019be:	e01c      	b.n	80019fa <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <HAL_ADC_PollForConversion+0x1d8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d004      	beq.n	80019d4 <HAL_ADC_PollForConversion+0x84>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a57      	ldr	r2, [pc, #348]	; (8001b2c <HAL_ADC_PollForConversion+0x1dc>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_ADC_PollForConversion+0x88>
 80019d4:	4b56      	ldr	r3, [pc, #344]	; (8001b30 <HAL_ADC_PollForConversion+0x1e0>)
 80019d6:	e000      	b.n	80019da <HAL_ADC_PollForConversion+0x8a>
 80019d8:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <HAL_ADC_PollForConversion+0x1e4>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fc02 	bl	80011e4 <LL_ADC_GetMultiDMATransfer>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ea:	f043 0220 	orr.w	r2, r3, #32
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e093      	b.n	8001b1e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019f6:	2304      	movs	r3, #4
 80019f8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019fa:	f7ff f9e5 	bl	8000dc8 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a00:	e021      	b.n	8001a46 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a08:	d01d      	beq.n	8001a46 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a0a:	f7ff f9dd 	bl	8000dc8 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d302      	bcc.n	8001a20 <HAL_ADC_PollForConversion+0xd0>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d112      	bne.n	8001a46 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10b      	bne.n	8001a46 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a32:	f043 0204 	orr.w	r2, r3, #4
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e06b      	b.n	8001b1e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0d6      	beq.n	8001a02 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fb05 	bl	8001074 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01c      	beq.n	8001aaa <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	7e5b      	ldrb	r3, [r3, #25]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d118      	bne.n	8001aaa <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d111      	bne.n	8001aaa <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d105      	bne.n	8001aaa <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <HAL_ADC_PollForConversion+0x1dc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d002      	beq.n	8001aba <HAL_ADC_PollForConversion+0x16a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	e000      	b.n	8001abc <HAL_ADC_PollForConversion+0x16c>
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_ADC_PollForConversion+0x1d8>)
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d008      	beq.n	8001ad6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d002      	beq.n	8001ad6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b09      	cmp	r3, #9
 8001ad4:	d104      	bne.n	8001ae0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	e00c      	b.n	8001afa <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <HAL_ADC_PollForConversion+0x1dc>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d002      	beq.n	8001af0 <HAL_ADC_PollForConversion+0x1a0>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	e000      	b.n	8001af2 <HAL_ADC_PollForConversion+0x1a2>
 8001af0:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <HAL_ADC_PollForConversion+0x1d8>)
 8001af2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d104      	bne.n	8001b0a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2208      	movs	r2, #8
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e008      	b.n	8001b1c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d103      	bne.n	8001b1c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	220c      	movs	r2, #12
 8001b1a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40022000 	.word	0x40022000
 8001b2c:	40022100 	.word	0x40022100
 8001b30:	40022300 	.word	0x40022300
 8001b34:	58026300 	.word	0x58026300

08001b38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b0b9      	sub	sp, #228	; 0xe4
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b6e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4ab3      	ldr	r2, [pc, #716]	; (8001e44 <HAL_ADC_ConfigChannel+0x2f0>)
 8001b76:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d102      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x34>
 8001b82:	2302      	movs	r3, #2
 8001b84:	f000 bcfa 	b.w	800257c <HAL_ADC_ConfigChannel+0xa28>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fbe3 	bl	8001360 <LL_ADC_REG_IsConversionOngoing>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f040 84de 	bne.w	800255e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4aa8      	ldr	r2, [pc, #672]	; (8001e48 <HAL_ADC_ConfigChannel+0x2f4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d033      	beq.n	8001c14 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d108      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x76>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0e9b      	lsrs	r3, r3, #26
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	e01d      	b.n	8001c06 <HAL_ADC_ConfigChannel+0xb2>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001be2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8001bee:	2320      	movs	r3, #32
 8001bf0:	e004      	b.n	8001bfc <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8001bf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	2201      	movs	r2, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	69d1      	ldr	r1, [r2, #28]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	f7ff fa3a 	bl	800109a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fb98 	bl	8001360 <LL_ADC_REG_IsConversionOngoing>
 8001c30:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fba4 	bl	8001386 <LL_ADC_INJ_IsConversionOngoing>
 8001c3e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 8270 	bne.w	800212c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f040 826b 	bne.w	800212c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6819      	ldr	r1, [r3, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	461a      	mov	r2, r3
 8001c64:	f7ff fa45 	bl	80010f2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a76      	ldr	r2, [pc, #472]	; (8001e48 <HAL_ADC_ConfigChannel+0x2f4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d10d      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c8c:	e032      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c8e:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_ADC_ConfigChannel+0x2f8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x160>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	e01d      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x19c>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10b      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x186>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	e00a      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x19c>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d048      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6919      	ldr	r1, [r3, #16]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d0c:	f7ff f8c0 	bl	8000e90 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a4c      	ldr	r2, [pc, #304]	; (8001e48 <HAL_ADC_ConfigChannel+0x2f4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d119      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6919      	ldr	r1, [r3, #16]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	461a      	mov	r2, r3
 8001d28:	f7ff f958 	bl	8000fdc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6919      	ldr	r1, [r3, #16]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d102      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x1f0>
 8001d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d42:	e000      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x1f2>
 8001d44:	2300      	movs	r3, #0
 8001d46:	461a      	mov	r2, r3
 8001d48:	f7ff f926 	bl	8000f98 <LL_ADC_SetOffsetSaturation>
 8001d4c:	e1ee      	b.n	800212c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6919      	ldr	r1, [r3, #16]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d102      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x212>
 8001d60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d64:	e000      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x214>
 8001d66:	2300      	movs	r3, #0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f7ff f8f3 	bl	8000f54 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6919      	ldr	r1, [r3, #16]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	7e1b      	ldrb	r3, [r3, #24]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d102      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x230>
 8001d7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d82:	e000      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x232>
 8001d84:	2300      	movs	r3, #0
 8001d86:	461a      	mov	r2, r3
 8001d88:	f7ff f8ca 	bl	8000f20 <LL_ADC_SetDataRightShift>
 8001d8c:	e1ce      	b.n	800212c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a2d      	ldr	r2, [pc, #180]	; (8001e48 <HAL_ADC_ConfigChannel+0x2f4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	f040 8181 	bne.w	800209c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f8a7 	bl	8000ef4 <LL_ADC_GetOffsetChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10a      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x272>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff f89c 	bl	8000ef4 <LL_ADC_GetOffsetChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	0e9b      	lsrs	r3, r3, #26
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	e01e      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x2b0>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f891 	bl	8000ef4 <LL_ADC_GetOffsetChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8001de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001de8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8001dec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8001df4:	2320      	movs	r3, #32
 8001df6:	e004      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8001df8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d105      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x2c8>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0e9b      	lsrs	r3, r3, #26
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	e01e      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x306>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001e30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001e38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d107      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8001e40:	2320      	movs	r3, #32
 8001e42:	e00a      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x306>
 8001e44:	47ff0000 	.word	0x47ff0000
 8001e48:	58026000 	.word	0x58026000
 8001e4c:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8001e50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d106      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f8da 	bl	8001020 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f83e 	bl	8000ef4 <LL_ADC_GetOffsetChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10a      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x344>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2101      	movs	r1, #1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f833 	bl	8000ef4 <LL_ADC_GetOffsetChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	0e9b      	lsrs	r3, r3, #26
 8001e92:	f003 021f 	and.w	r2, r3, #31
 8001e96:	e01e      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x382>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f828 	bl	8000ef4 <LL_ADC_GetOffsetChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001ebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	e004      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8001eca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x39a>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	0e9b      	lsrs	r3, r3, #26
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	e018      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x3cc>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001f02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001f0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8001f12:	2320      	movs	r3, #32
 8001f14:	e004      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8001f16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d106      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff f877 	bl	8001020 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2102      	movs	r1, #2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe ffdb 	bl	8000ef4 <LL_ADC_GetOffsetChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10a      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x40a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe ffd0 	bl	8000ef4 <LL_ADC_GetOffsetChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	0e9b      	lsrs	r3, r3, #26
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	e01e      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x448>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2102      	movs	r1, #2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe ffc5 	bl	8000ef4 <LL_ADC_GetOffsetChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	e004      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8001f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x460>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0e9b      	lsrs	r3, r3, #26
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	e014      	b.n	8001fde <HAL_ADC_ConfigChannel+0x48a>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	e004      	b.n	8001fde <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8001fd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d106      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2102      	movs	r1, #2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f818 	bl	8001020 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2103      	movs	r1, #3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe ff7c 	bl	8000ef4 <LL_ADC_GetOffsetChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10a      	bne.n	800201c <HAL_ADC_ConfigChannel+0x4c8>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2103      	movs	r1, #3
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe ff71 	bl	8000ef4 <LL_ADC_GetOffsetChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	0e9b      	lsrs	r3, r3, #26
 8002016:	f003 021f 	and.w	r2, r3, #31
 800201a:	e017      	b.n	800204c <HAL_ADC_ConfigChannel+0x4f8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2103      	movs	r1, #3
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe ff66 	bl	8000ef4 <LL_ADC_GetOffsetChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002036:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800203e:	2320      	movs	r3, #32
 8002040:	e003      	b.n	800204a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002054:	2b00      	cmp	r3, #0
 8002056:	d105      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x510>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0e9b      	lsrs	r3, r3, #26
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	e011      	b.n	8002088 <HAL_ADC_ConfigChannel+0x534>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002074:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002076:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800207c:	2320      	movs	r3, #32
 800207e:	e003      	b.n	8002088 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	429a      	cmp	r2, r3
 800208a:	d14f      	bne.n	800212c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2200      	movs	r2, #0
 8002092:	2103      	movs	r1, #3
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe ffc3 	bl	8001020 <LL_ADC_SetOffsetState>
 800209a:	e047      	b.n	800212c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	069b      	lsls	r3, r3, #26
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d107      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020be:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	069b      	lsls	r3, r3, #26
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020e2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	069b      	lsls	r3, r3, #26
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d107      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002106:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800210e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	069b      	lsls	r3, r3, #26
 8002118:	429a      	cmp	r2, r3
 800211a:	d107      	bne.n	800212c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800212a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff f8db 	bl	80012ec <LL_ADC_IsEnabled>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	f040 8219 	bne.w	8002570 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6819      	ldr	r1, [r3, #0]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	461a      	mov	r2, r3
 800214c:	f7fe fffc 	bl	8001148 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4aa1      	ldr	r2, [pc, #644]	; (80023dc <HAL_ADC_ConfigChannel+0x888>)
 8002156:	4293      	cmp	r3, r2
 8002158:	f040 812e 	bne.w	80023b8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x630>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0e9b      	lsrs	r3, r3, #26
 8002172:	3301      	adds	r3, #1
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	2b09      	cmp	r3, #9
 800217a:	bf94      	ite	ls
 800217c:	2301      	movls	r3, #1
 800217e:	2300      	movhi	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	e019      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x664>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002194:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800219c:	2320      	movs	r3, #32
 800219e:	e003      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80021a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	2b09      	cmp	r3, #9
 80021b0:	bf94      	ite	ls
 80021b2:	2301      	movls	r3, #1
 80021b4:	2300      	movhi	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d079      	beq.n	80022b0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d107      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x684>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	0e9b      	lsrs	r3, r3, #26
 80021ce:	3301      	adds	r3, #1
 80021d0:	069b      	lsls	r3, r3, #26
 80021d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d6:	e015      	b.n	8002204 <HAL_ADC_ConfigChannel+0x6b0>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80021e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80021ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80021f0:	2320      	movs	r3, #32
 80021f2:	e003      	b.n	80021fc <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80021f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	069b      	lsls	r3, r3, #26
 8002200:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800220c:	2b00      	cmp	r3, #0
 800220e:	d109      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x6d0>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0e9b      	lsrs	r3, r3, #26
 8002216:	3301      	adds	r3, #1
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	2101      	movs	r1, #1
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	e017      	b.n	8002254 <HAL_ADC_ConfigChannel+0x700>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002234:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 800223c:	2320      	movs	r3, #32
 800223e:	e003      	b.n	8002248 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	3301      	adds	r3, #1
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	ea42 0103 	orr.w	r1, r2, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <HAL_ADC_ConfigChannel+0x726>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0e9b      	lsrs	r3, r3, #26
 800226a:	3301      	adds	r3, #1
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4613      	mov	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	051b      	lsls	r3, r3, #20
 8002278:	e018      	b.n	80022ac <HAL_ADC_ConfigChannel+0x758>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800228c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002292:	2320      	movs	r3, #32
 8002294:	e003      	b.n	800229e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ac:	430b      	orrs	r3, r1
 80022ae:	e07e      	b.n	80023ae <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x778>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	0e9b      	lsrs	r3, r3, #26
 80022c2:	3301      	adds	r3, #1
 80022c4:	069b      	lsls	r3, r3, #26
 80022c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ca:	e015      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x7a4>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e003      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	069b      	lsls	r3, r3, #26
 80022f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x7c4>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	3301      	adds	r3, #1
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2101      	movs	r1, #1
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	e017      	b.n	8002348 <HAL_ADC_ConfigChannel+0x7f4>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	61bb      	str	r3, [r7, #24]
  return result;
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002330:	2320      	movs	r3, #32
 8002332:	e003      	b.n	800233c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	3301      	adds	r3, #1
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	ea42 0103 	orr.w	r1, r2, r3
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10d      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x820>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0e9b      	lsrs	r3, r3, #26
 800235e:	3301      	adds	r3, #1
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	3b1e      	subs	r3, #30
 800236c:	051b      	lsls	r3, r3, #20
 800236e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002372:	e01b      	b.n	80023ac <HAL_ADC_ConfigChannel+0x858>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	60fb      	str	r3, [r7, #12]
  return result;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800238c:	2320      	movs	r3, #32
 800238e:	e003      	b.n	8002398 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	3301      	adds	r3, #1
 800239a:	f003 021f 	and.w	r2, r3, #31
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	3b1e      	subs	r3, #30
 80023a6:	051b      	lsls	r3, r3, #20
 80023a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ac:	430b      	orrs	r3, r1
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	6892      	ldr	r2, [r2, #8]
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7fe fe9d 	bl	80010f2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f280 80d7 	bge.w	8002570 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a06      	ldr	r2, [pc, #24]	; (80023e0 <HAL_ADC_ConfigChannel+0x88c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d004      	beq.n	80023d6 <HAL_ADC_ConfigChannel+0x882>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_ADC_ConfigChannel+0x890>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d10a      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x898>
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <HAL_ADC_ConfigChannel+0x894>)
 80023d8:	e009      	b.n	80023ee <HAL_ADC_ConfigChannel+0x89a>
 80023da:	bf00      	nop
 80023dc:	47ff0000 	.word	0x47ff0000
 80023e0:	40022000 	.word	0x40022000
 80023e4:	40022100 	.word	0x40022100
 80023e8:	40022300 	.word	0x40022300
 80023ec:	4b65      	ldr	r3, [pc, #404]	; (8002584 <HAL_ADC_ConfigChannel+0xa30>)
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fd40 	bl	8000e74 <LL_ADC_GetCommonPathInternalCh>
 80023f4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a62      	ldr	r2, [pc, #392]	; (8002588 <HAL_ADC_ConfigChannel+0xa34>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d004      	beq.n	800240c <HAL_ADC_ConfigChannel+0x8b8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a61      	ldr	r2, [pc, #388]	; (800258c <HAL_ADC_ConfigChannel+0xa38>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d10e      	bne.n	800242a <HAL_ADC_ConfigChannel+0x8d6>
 800240c:	485e      	ldr	r0, [pc, #376]	; (8002588 <HAL_ADC_ConfigChannel+0xa34>)
 800240e:	f7fe ff6d 	bl	80012ec <LL_ADC_IsEnabled>
 8002412:	4604      	mov	r4, r0
 8002414:	485d      	ldr	r0, [pc, #372]	; (800258c <HAL_ADC_ConfigChannel+0xa38>)
 8002416:	f7fe ff69 	bl	80012ec <LL_ADC_IsEnabled>
 800241a:	4603      	mov	r3, r0
 800241c:	4323      	orrs	r3, r4
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	e008      	b.n	800243c <HAL_ADC_ConfigChannel+0x8e8>
 800242a:	4859      	ldr	r0, [pc, #356]	; (8002590 <HAL_ADC_ConfigChannel+0xa3c>)
 800242c:	f7fe ff5e 	bl	80012ec <LL_ADC_IsEnabled>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	bf0c      	ite	eq
 8002436:	2301      	moveq	r3, #1
 8002438:	2300      	movne	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8084 	beq.w	800254a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a53      	ldr	r2, [pc, #332]	; (8002594 <HAL_ADC_ConfigChannel+0xa40>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d132      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x95e>
 800244c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d12c      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a4c      	ldr	r2, [pc, #304]	; (8002590 <HAL_ADC_ConfigChannel+0xa3c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	f040 8086 	bne.w	8002570 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a47      	ldr	r2, [pc, #284]	; (8002588 <HAL_ADC_ConfigChannel+0xa34>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_ADC_ConfigChannel+0x924>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a46      	ldr	r2, [pc, #280]	; (800258c <HAL_ADC_ConfigChannel+0xa38>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_ADC_ConfigChannel+0x928>
 8002478:	4a47      	ldr	r2, [pc, #284]	; (8002598 <HAL_ADC_ConfigChannel+0xa44>)
 800247a:	e000      	b.n	800247e <HAL_ADC_ConfigChannel+0x92a>
 800247c:	4a41      	ldr	r2, [pc, #260]	; (8002584 <HAL_ADC_ConfigChannel+0xa30>)
 800247e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002482:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f7fe fce0 	bl	8000e4e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800248e:	4b43      	ldr	r3, [pc, #268]	; (800259c <HAL_ADC_ConfigChannel+0xa48>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	099b      	lsrs	r3, r3, #6
 8002494:	4a42      	ldr	r2, [pc, #264]	; (80025a0 <HAL_ADC_ConfigChannel+0xa4c>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	099b      	lsrs	r3, r3, #6
 800249c:	3301      	adds	r3, #1
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024a2:	e002      	b.n	80024aa <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f9      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024b0:	e05e      	b.n	8002570 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a3b      	ldr	r2, [pc, #236]	; (80025a4 <HAL_ADC_ConfigChannel+0xa50>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d120      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x9aa>
 80024bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d11a      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a30      	ldr	r2, [pc, #192]	; (8002590 <HAL_ADC_ConfigChannel+0xa3c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d14e      	bne.n	8002570 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2c      	ldr	r2, [pc, #176]	; (8002588 <HAL_ADC_ConfigChannel+0xa34>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d004      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x992>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2a      	ldr	r2, [pc, #168]	; (800258c <HAL_ADC_ConfigChannel+0xa38>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x996>
 80024e6:	4a2c      	ldr	r2, [pc, #176]	; (8002598 <HAL_ADC_ConfigChannel+0xa44>)
 80024e8:	e000      	b.n	80024ec <HAL_ADC_ConfigChannel+0x998>
 80024ea:	4a26      	ldr	r2, [pc, #152]	; (8002584 <HAL_ADC_ConfigChannel+0xa30>)
 80024ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f7fe fca9 	bl	8000e4e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024fc:	e038      	b.n	8002570 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a29      	ldr	r2, [pc, #164]	; (80025a8 <HAL_ADC_ConfigChannel+0xa54>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d133      	bne.n	8002570 <HAL_ADC_ConfigChannel+0xa1c>
 8002508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800250c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d12d      	bne.n	8002570 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_ADC_ConfigChannel+0xa3c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d128      	bne.n	8002570 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a19      	ldr	r2, [pc, #100]	; (8002588 <HAL_ADC_ConfigChannel+0xa34>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d004      	beq.n	8002532 <HAL_ADC_ConfigChannel+0x9de>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a17      	ldr	r2, [pc, #92]	; (800258c <HAL_ADC_ConfigChannel+0xa38>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x9e2>
 8002532:	4a19      	ldr	r2, [pc, #100]	; (8002598 <HAL_ADC_ConfigChannel+0xa44>)
 8002534:	e000      	b.n	8002538 <HAL_ADC_ConfigChannel+0x9e4>
 8002536:	4a13      	ldr	r2, [pc, #76]	; (8002584 <HAL_ADC_ConfigChannel+0xa30>)
 8002538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800253c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f7fe fc83 	bl	8000e4e <LL_ADC_SetCommonPathInternalCh>
 8002548:	e012      	b.n	8002570 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254e:	f043 0220 	orr.w	r2, r3, #32
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800255c:	e008      	b.n	8002570 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	f043 0220 	orr.w	r2, r3, #32
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002578:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800257c:	4618      	mov	r0, r3
 800257e:	37e4      	adds	r7, #228	; 0xe4
 8002580:	46bd      	mov	sp, r7
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	58026300 	.word	0x58026300
 8002588:	40022000 	.word	0x40022000
 800258c:	40022100 	.word	0x40022100
 8002590:	58026000 	.word	0x58026000
 8002594:	c7520000 	.word	0xc7520000
 8002598:	40022300 	.word	0x40022300
 800259c:	24000000 	.word	0x24000000
 80025a0:	053e2d63 	.word	0x053e2d63
 80025a4:	c3210000 	.word	0xc3210000
 80025a8:	cb840000 	.word	0xcb840000

080025ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fe97 	bl	80012ec <LL_ADC_IsEnabled>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d16e      	bne.n	80026a2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	4b38      	ldr	r3, [pc, #224]	; (80026ac <ADC_Enable+0x100>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00d      	beq.n	80025ee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d6:	f043 0210 	orr.w	r2, r3, #16
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025e2:	f043 0201 	orr.w	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e05a      	b.n	80026a4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fe52 	bl	800129c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025f8:	f7fe fbe6 	bl	8000dc8 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2b      	ldr	r2, [pc, #172]	; (80026b0 <ADC_Enable+0x104>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d004      	beq.n	8002612 <ADC_Enable+0x66>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a29      	ldr	r2, [pc, #164]	; (80026b4 <ADC_Enable+0x108>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <ADC_Enable+0x6a>
 8002612:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <ADC_Enable+0x10c>)
 8002614:	e000      	b.n	8002618 <ADC_Enable+0x6c>
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <ADC_Enable+0x110>)
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fdd5 	bl	80011c8 <LL_ADC_GetMultimode>
 800261e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a23      	ldr	r2, [pc, #140]	; (80026b4 <ADC_Enable+0x108>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d002      	beq.n	8002630 <ADC_Enable+0x84>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	e000      	b.n	8002632 <ADC_Enable+0x86>
 8002630:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <ADC_Enable+0x104>)
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4293      	cmp	r3, r2
 8002638:	d02c      	beq.n	8002694 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d130      	bne.n	80026a2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002640:	e028      	b.n	8002694 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fe50 	bl	80012ec <LL_ADC_IsEnabled>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d104      	bne.n	800265c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fe20 	bl	800129c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800265c:	f7fe fbb4 	bl	8000dc8 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d914      	bls.n	8002694 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d00d      	beq.n	8002694 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267c:	f043 0210 	orr.w	r2, r3, #16
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e007      	b.n	80026a4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d1cf      	bne.n	8002642 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	8000003f 	.word	0x8000003f
 80026b0:	40022000 	.word	0x40022000
 80026b4:	40022100 	.word	0x40022100
 80026b8:	40022300 	.word	0x40022300
 80026bc:	58026300 	.word	0x58026300

080026c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fe20 	bl	8001312 <LL_ADC_IsDisableOngoing>
 80026d2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fe07 	bl	80012ec <LL_ADC_IsEnabled>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d047      	beq.n	8002774 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d144      	bne.n	8002774 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030d 	and.w	r3, r3, #13
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d10c      	bne.n	8002712 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fde1 	bl	80012c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2203      	movs	r2, #3
 8002708:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800270a:	f7fe fb5d 	bl	8000dc8 <HAL_GetTick>
 800270e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002710:	e029      	b.n	8002766 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002716:	f043 0210 	orr.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e023      	b.n	8002776 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800272e:	f7fe fb4b 	bl	8000dc8 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d914      	bls.n	8002766 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00d      	beq.n	8002766 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274e:	f043 0210 	orr.w	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e007      	b.n	8002776 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1dc      	bne.n	800272e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a6b      	ldr	r2, [pc, #428]	; (800293c <ADC_ConfigureBoostMode+0x1bc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d004      	beq.n	800279c <ADC_ConfigureBoostMode+0x1c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6a      	ldr	r2, [pc, #424]	; (8002940 <ADC_ConfigureBoostMode+0x1c0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d109      	bne.n	80027b0 <ADC_ConfigureBoostMode+0x30>
 800279c:	4b69      	ldr	r3, [pc, #420]	; (8002944 <ADC_ConfigureBoostMode+0x1c4>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf14      	ite	ne
 80027a8:	2301      	movne	r3, #1
 80027aa:	2300      	moveq	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	e008      	b.n	80027c2 <ADC_ConfigureBoostMode+0x42>
 80027b0:	4b65      	ldr	r3, [pc, #404]	; (8002948 <ADC_ConfigureBoostMode+0x1c8>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d01c      	beq.n	8002800 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027c6:	f001 fc23 	bl	8004010 <HAL_RCC_GetHCLKFreq>
 80027ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027d4:	d010      	beq.n	80027f8 <ADC_ConfigureBoostMode+0x78>
 80027d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027da:	d871      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x140>
 80027dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e0:	d002      	beq.n	80027e8 <ADC_ConfigureBoostMode+0x68>
 80027e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027e6:	d16b      	bne.n	80028c0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	0c1b      	lsrs	r3, r3, #16
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	60fb      	str	r3, [r7, #12]
        break;
 80027f6:	e066      	b.n	80028c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	60fb      	str	r3, [r7, #12]
        break;
 80027fe:	e062      	b.n	80028c6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002800:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002804:	f002 fb2e 	bl	8004e64 <HAL_RCCEx_GetPeriphCLKFreq>
 8002808:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002812:	d051      	beq.n	80028b8 <ADC_ConfigureBoostMode+0x138>
 8002814:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002818:	d854      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x144>
 800281a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800281e:	d047      	beq.n	80028b0 <ADC_ConfigureBoostMode+0x130>
 8002820:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002824:	d84e      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x144>
 8002826:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800282a:	d03d      	beq.n	80028a8 <ADC_ConfigureBoostMode+0x128>
 800282c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002830:	d848      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x144>
 8002832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002836:	d033      	beq.n	80028a0 <ADC_ConfigureBoostMode+0x120>
 8002838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800283c:	d842      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x144>
 800283e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002842:	d029      	beq.n	8002898 <ADC_ConfigureBoostMode+0x118>
 8002844:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002848:	d83c      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x144>
 800284a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800284e:	d01a      	beq.n	8002886 <ADC_ConfigureBoostMode+0x106>
 8002850:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002854:	d836      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x144>
 8002856:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800285a:	d014      	beq.n	8002886 <ADC_ConfigureBoostMode+0x106>
 800285c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002860:	d830      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x144>
 8002862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002866:	d00e      	beq.n	8002886 <ADC_ConfigureBoostMode+0x106>
 8002868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800286c:	d82a      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x144>
 800286e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002872:	d008      	beq.n	8002886 <ADC_ConfigureBoostMode+0x106>
 8002874:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002878:	d824      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x144>
 800287a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800287e:	d002      	beq.n	8002886 <ADC_ConfigureBoostMode+0x106>
 8002880:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002884:	d11e      	bne.n	80028c4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	0c9b      	lsrs	r3, r3, #18
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	60fb      	str	r3, [r7, #12]
        break;
 8002896:	e016      	b.n	80028c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	60fb      	str	r3, [r7, #12]
        break;
 800289e:	e012      	b.n	80028c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	60fb      	str	r3, [r7, #12]
        break;
 80028a6:	e00e      	b.n	80028c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	099b      	lsrs	r3, r3, #6
 80028ac:	60fb      	str	r3, [r7, #12]
        break;
 80028ae:	e00a      	b.n	80028c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	09db      	lsrs	r3, r3, #7
 80028b4:	60fb      	str	r3, [r7, #12]
        break;
 80028b6:	e006      	b.n	80028c6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	60fb      	str	r3, [r7, #12]
        break;
 80028be:	e002      	b.n	80028c6 <ADC_ConfigureBoostMode+0x146>
        break;
 80028c0:	bf00      	nop
 80028c2:	e000      	b.n	80028c6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80028c4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a1f      	ldr	r2, [pc, #124]	; (800294c <ADC_ConfigureBoostMode+0x1cc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d808      	bhi.n	80028e6 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028e2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028e4:	e025      	b.n	8002932 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4a19      	ldr	r2, [pc, #100]	; (8002950 <ADC_ConfigureBoostMode+0x1d0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d80a      	bhi.n	8002904 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002900:	609a      	str	r2, [r3, #8]
}
 8002902:	e016      	b.n	8002932 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4a13      	ldr	r2, [pc, #76]	; (8002954 <ADC_ConfigureBoostMode+0x1d4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d80a      	bhi.n	8002922 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	e007      	b.n	8002932 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002930:	609a      	str	r2, [r3, #8]
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40022000 	.word	0x40022000
 8002940:	40022100 	.word	0x40022100
 8002944:	40022300 	.word	0x40022300
 8002948:	58026300 	.word	0x58026300
 800294c:	005f5e10 	.word	0x005f5e10
 8002950:	00bebc20 	.word	0x00bebc20
 8002954:	017d7840 	.word	0x017d7840

08002958 <LL_ADC_IsEnabled>:
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <LL_ADC_IsEnabled+0x18>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <LL_ADC_IsEnabled+0x1a>
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <LL_ADC_StartCalibration>:
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <LL_ADC_StartCalibration+0x38>)
 8002992:	4013      	ands	r3, r2
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029a0:	430a      	orrs	r2, r1
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	609a      	str	r2, [r3, #8]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	3ffeffc0 	.word	0x3ffeffc0

080029bc <LL_ADC_IsCalibrationOnGoing>:
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029d0:	d101      	bne.n	80029d6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_ADC_REG_IsConversionOngoing>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d101      	bne.n	80029fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_ADCEx_Calibration_Start+0x1e>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e04c      	b.n	8002ac4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f7ff fe44 	bl	80026c0 <ADC_Disable>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d135      	bne.n	8002aae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a46:	4b21      	ldr	r3, [pc, #132]	; (8002acc <HAL_ADCEx_Calibration_Start+0xc0>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	f043 0202 	orr.w	r2, r3, #2
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ff90 	bl	8002980 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a60:	e014      	b.n	8002a8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	3301      	adds	r3, #1
 8002a66:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d30d      	bcc.n	8002a8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a74:	f023 0312 	bic.w	r3, r3, #18
 8002a78:	f043 0210 	orr.w	r2, r3, #16
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e01b      	b.n	8002ac4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff93 	bl	80029bc <LL_ADC_IsCalibrationOnGoing>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e2      	bne.n	8002a62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa0:	f023 0303 	bic.w	r3, r3, #3
 8002aa4:	f043 0201 	orr.w	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	661a      	str	r2, [r3, #96]	; 0x60
 8002aac:	e005      	b.n	8002aba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab2:	f043 0210 	orr.w	r2, r3, #16
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	ffffeefd 	.word	0xffffeefd
 8002ad0:	25c3f800 	.word	0x25c3f800

08002ad4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b0a3      	sub	sp, #140	; 0x8c
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e0c1      	b.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a5e      	ldr	r2, [pc, #376]	; (8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d102      	bne.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b0c:	4b5d      	ldr	r3, [pc, #372]	; (8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	e001      	b.n	8002b16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0a0      	b.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff54 	bl	80029e4 <LL_ADC_REG_IsConversionOngoing>
 8002b3c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff4d 	bl	80029e4 <LL_ADC_REG_IsConversionOngoing>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 8081 	bne.w	8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d17c      	bne.n	8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a48      	ldr	r2, [pc, #288]	; (8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d004      	beq.n	8002b6e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a46      	ldr	r2, [pc, #280]	; (8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002b6e:	4b46      	ldr	r3, [pc, #280]	; (8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002b70:	e000      	b.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002b72:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002b74:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d039      	beq.n	8002bf2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002b7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a3a      	ldr	r2, [pc, #232]	; (8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d004      	beq.n	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a39      	ldr	r2, [pc, #228]	; (8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d10e      	bne.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002ba4:	4836      	ldr	r0, [pc, #216]	; (8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002ba6:	f7ff fed7 	bl	8002958 <LL_ADC_IsEnabled>
 8002baa:	4604      	mov	r4, r0
 8002bac:	4835      	ldr	r0, [pc, #212]	; (8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002bae:	f7ff fed3 	bl	8002958 <LL_ADC_IsEnabled>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4323      	orrs	r3, r4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bf0c      	ite	eq
 8002bba:	2301      	moveq	r3, #1
 8002bbc:	2300      	movne	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	e008      	b.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002bc2:	4833      	ldr	r0, [pc, #204]	; (8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002bc4:	f7ff fec8 	bl	8002958 <LL_ADC_IsEnabled>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d047      	beq.n	8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	4b2d      	ldr	r3, [pc, #180]	; (8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	6811      	ldr	r1, [r2, #0]
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	6892      	ldr	r2, [r2, #8]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	431a      	orrs	r2, r3
 8002bec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf0:	e03a      	b.n	8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002bf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bfc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1f      	ldr	r2, [pc, #124]	; (8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d004      	beq.n	8002c12 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10e      	bne.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8002c12:	481b      	ldr	r0, [pc, #108]	; (8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c14:	f7ff fea0 	bl	8002958 <LL_ADC_IsEnabled>
 8002c18:	4604      	mov	r4, r0
 8002c1a:	481a      	ldr	r0, [pc, #104]	; (8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c1c:	f7ff fe9c 	bl	8002958 <LL_ADC_IsEnabled>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4323      	orrs	r3, r4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e008      	b.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8002c30:	4817      	ldr	r0, [pc, #92]	; (8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002c32:	f7ff fe91 	bl	8002958 <LL_ADC_IsEnabled>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d010      	beq.n	8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002c50:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c52:	e009      	b.n	8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002c66:	e000      	b.n	8002c6a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002c72:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	378c      	adds	r7, #140	; 0x8c
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd90      	pop	{r4, r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40022000 	.word	0x40022000
 8002c84:	40022100 	.word	0x40022100
 8002c88:	40022300 	.word	0x40022300
 8002c8c:	58026300 	.word	0x58026300
 8002c90:	58026000 	.word	0x58026000
 8002c94:	fffff0e0 	.word	0xfffff0e0

08002c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc6:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	60d3      	str	r3, [r2, #12]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00
 8002cdc:	05fa0000 	.word	0x05fa0000

08002ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	f003 0307 	and.w	r3, r3, #7
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db0a      	blt.n	8002d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	490c      	ldr	r1, [pc, #48]	; (8002d48 <__NVIC_SetPriority+0x4c>)
 8002d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d24:	e00a      	b.n	8002d3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4908      	ldr	r1, [pc, #32]	; (8002d4c <__NVIC_SetPriority+0x50>)
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	3b04      	subs	r3, #4
 8002d34:	0112      	lsls	r2, r2, #4
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	440b      	add	r3, r1
 8002d3a:	761a      	strb	r2, [r3, #24]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000e100 	.word	0xe000e100
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f1c3 0307 	rsb	r3, r3, #7
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	bf28      	it	cs
 8002d6e:	2304      	movcs	r3, #4
 8002d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	d902      	bls.n	8002d80 <NVIC_EncodePriority+0x30>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3b03      	subs	r3, #3
 8002d7e:	e000      	b.n	8002d82 <NVIC_EncodePriority+0x32>
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	401a      	ands	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	43d9      	mvns	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	4313      	orrs	r3, r2
         );
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3724      	adds	r7, #36	; 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc8:	d301      	bcc.n	8002dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00f      	b.n	8002dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <SysTick_Config+0x40>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd6:	210f      	movs	r1, #15
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ddc:	f7ff ff8e 	bl	8002cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <SysTick_Config+0x40>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de6:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <SysTick_Config+0x40>)
 8002de8:	2207      	movs	r2, #7
 8002dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	e000e010 	.word	0xe000e010

08002dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ff47 	bl	8002c98 <__NVIC_SetPriorityGrouping>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e20:	f7ff ff5e 	bl	8002ce0 <__NVIC_GetPriorityGrouping>
 8002e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7ff ff90 	bl	8002d50 <NVIC_EncodePriority>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff5f 	bl	8002cfc <__NVIC_SetPriority>
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff ffb2 	bl	8002db8 <SysTick_Config>
 8002e54:	4603      	mov	r3, r0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002e6e:	4b86      	ldr	r3, [pc, #536]	; (8003088 <HAL_GPIO_Init+0x228>)
 8002e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e72:	e18c      	b.n	800318e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2101      	movs	r1, #1
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 817e 	beq.w	8003188 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d005      	beq.n	8002ea4 <HAL_GPIO_Init+0x44>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d130      	bne.n	8002f06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2203      	movs	r2, #3
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eda:	2201      	movs	r2, #1
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 0201 	and.w	r2, r3, #1
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d017      	beq.n	8002f42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d123      	bne.n	8002f96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	08da      	lsrs	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	220f      	movs	r2, #15
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	08da      	lsrs	r2, r3, #3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3208      	adds	r2, #8
 8002f90:	69b9      	ldr	r1, [r7, #24]
 8002f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0203 	and.w	r2, r3, #3
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80d8 	beq.w	8003188 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd8:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_GPIO_Init+0x22c>)
 8002fda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fde:	4a2b      	ldr	r2, [pc, #172]	; (800308c <HAL_GPIO_Init+0x22c>)
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_GPIO_Init+0x22c>)
 8002fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff6:	4a26      	ldr	r2, [pc, #152]	; (8003090 <HAL_GPIO_Init+0x230>)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	089b      	lsrs	r3, r3, #2
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	220f      	movs	r2, #15
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a1d      	ldr	r2, [pc, #116]	; (8003094 <HAL_GPIO_Init+0x234>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d04a      	beq.n	80030b8 <HAL_GPIO_Init+0x258>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <HAL_GPIO_Init+0x238>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d02b      	beq.n	8003082 <HAL_GPIO_Init+0x222>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a1b      	ldr	r2, [pc, #108]	; (800309c <HAL_GPIO_Init+0x23c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d025      	beq.n	800307e <HAL_GPIO_Init+0x21e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a1a      	ldr	r2, [pc, #104]	; (80030a0 <HAL_GPIO_Init+0x240>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01f      	beq.n	800307a <HAL_GPIO_Init+0x21a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <HAL_GPIO_Init+0x244>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d019      	beq.n	8003076 <HAL_GPIO_Init+0x216>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <HAL_GPIO_Init+0x248>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_GPIO_Init+0x212>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a17      	ldr	r2, [pc, #92]	; (80030ac <HAL_GPIO_Init+0x24c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00d      	beq.n	800306e <HAL_GPIO_Init+0x20e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <HAL_GPIO_Init+0x250>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <HAL_GPIO_Init+0x20a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <HAL_GPIO_Init+0x254>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d101      	bne.n	8003066 <HAL_GPIO_Init+0x206>
 8003062:	2309      	movs	r3, #9
 8003064:	e029      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 8003066:	230a      	movs	r3, #10
 8003068:	e027      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 800306a:	2307      	movs	r3, #7
 800306c:	e025      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 800306e:	2306      	movs	r3, #6
 8003070:	e023      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 8003072:	2305      	movs	r3, #5
 8003074:	e021      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 8003076:	2304      	movs	r3, #4
 8003078:	e01f      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 800307a:	2303      	movs	r3, #3
 800307c:	e01d      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 800307e:	2302      	movs	r3, #2
 8003080:	e01b      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 8003082:	2301      	movs	r3, #1
 8003084:	e019      	b.n	80030ba <HAL_GPIO_Init+0x25a>
 8003086:	bf00      	nop
 8003088:	58000080 	.word	0x58000080
 800308c:	58024400 	.word	0x58024400
 8003090:	58000400 	.word	0x58000400
 8003094:	58020000 	.word	0x58020000
 8003098:	58020400 	.word	0x58020400
 800309c:	58020800 	.word	0x58020800
 80030a0:	58020c00 	.word	0x58020c00
 80030a4:	58021000 	.word	0x58021000
 80030a8:	58021400 	.word	0x58021400
 80030ac:	58021800 	.word	0x58021800
 80030b0:	58021c00 	.word	0x58021c00
 80030b4:	58022400 	.word	0x58022400
 80030b8:	2300      	movs	r3, #0
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	f002 0203 	and.w	r2, r2, #3
 80030c0:	0092      	lsls	r2, r2, #2
 80030c2:	4093      	lsls	r3, r2
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ca:	4938      	ldr	r1, [pc, #224]	; (80031ac <HAL_GPIO_Init+0x34c>)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	3302      	adds	r3, #2
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80030fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800312c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	3301      	adds	r3, #1
 800318c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	f47f ae6b 	bne.w	8002e74 <HAL_GPIO_Init+0x14>
  }
}
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	3724      	adds	r7, #36	; 0x24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	58000400 	.word	0x58000400

080031b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	807b      	strh	r3, [r7, #2]
 80031bc:	4613      	mov	r3, r2
 80031be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031c0:	787b      	ldrb	r3, [r7, #1]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80031cc:	e003      	b.n	80031d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	041a      	lsls	r2, r3, #16
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	619a      	str	r2, [r3, #24]
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <HAL_PWREx_ConfigSupply+0x70>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d00a      	beq.n	800320e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031f8:	4b16      	ldr	r3, [pc, #88]	; (8003254 <HAL_PWREx_ConfigSupply+0x70>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	429a      	cmp	r2, r3
 8003204:	d001      	beq.n	800320a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e01f      	b.n	800324a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e01d      	b.n	800324a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <HAL_PWREx_ConfigSupply+0x70>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f023 0207 	bic.w	r2, r3, #7
 8003216:	490f      	ldr	r1, [pc, #60]	; (8003254 <HAL_PWREx_ConfigSupply+0x70>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4313      	orrs	r3, r2
 800321c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800321e:	f7fd fdd3 	bl	8000dc8 <HAL_GetTick>
 8003222:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003224:	e009      	b.n	800323a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003226:	f7fd fdcf 	bl	8000dc8 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003234:	d901      	bls.n	800323a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e007      	b.n	800324a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_PWREx_ConfigSupply+0x70>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003246:	d1ee      	bne.n	8003226 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	58024800 	.word	0x58024800

08003258 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08c      	sub	sp, #48	; 0x30
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e397      	b.n	800399a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8087 	beq.w	8003386 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003278:	4b9e      	ldr	r3, [pc, #632]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003282:	4b9c      	ldr	r3, [pc, #624]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	2b10      	cmp	r3, #16
 800328c:	d007      	beq.n	800329e <HAL_RCC_OscConfig+0x46>
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	2b18      	cmp	r3, #24
 8003292:	d110      	bne.n	80032b6 <HAL_RCC_OscConfig+0x5e>
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d10b      	bne.n	80032b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329e:	4b95      	ldr	r3, [pc, #596]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d06c      	beq.n	8003384 <HAL_RCC_OscConfig+0x12c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d168      	bne.n	8003384 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e371      	b.n	800399a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032be:	d106      	bne.n	80032ce <HAL_RCC_OscConfig+0x76>
 80032c0:	4b8c      	ldr	r3, [pc, #560]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a8b      	ldr	r2, [pc, #556]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	e02e      	b.n	800332c <HAL_RCC_OscConfig+0xd4>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x98>
 80032d6:	4b87      	ldr	r3, [pc, #540]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a86      	ldr	r2, [pc, #536]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80032dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b84      	ldr	r3, [pc, #528]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a83      	ldr	r2, [pc, #524]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80032e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e01d      	b.n	800332c <HAL_RCC_OscConfig+0xd4>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0xbc>
 80032fa:	4b7e      	ldr	r3, [pc, #504]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a7d      	ldr	r2, [pc, #500]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	4b7b      	ldr	r3, [pc, #492]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a7a      	ldr	r2, [pc, #488]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e00b      	b.n	800332c <HAL_RCC_OscConfig+0xd4>
 8003314:	4b77      	ldr	r3, [pc, #476]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a76      	ldr	r2, [pc, #472]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 800331a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	4b74      	ldr	r3, [pc, #464]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a73      	ldr	r2, [pc, #460]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d013      	beq.n	800335c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fd fd48 	bl	8000dc8 <HAL_GetTick>
 8003338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800333c:	f7fd fd44 	bl	8000dc8 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	; 0x64
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e325      	b.n	800399a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800334e:	4b69      	ldr	r3, [pc, #420]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0xe4>
 800335a:	e014      	b.n	8003386 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fd fd34 	bl	8000dc8 <HAL_GetTick>
 8003360:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003364:	f7fd fd30 	bl	8000dc8 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b64      	cmp	r3, #100	; 0x64
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e311      	b.n	800399a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003376:	4b5f      	ldr	r3, [pc, #380]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x10c>
 8003382:	e000      	b.n	8003386 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 808a 	beq.w	80034a8 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003394:	4b57      	ldr	r3, [pc, #348]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800339c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800339e:	4b55      	ldr	r3, [pc, #340]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <HAL_RCC_OscConfig+0x162>
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	2b18      	cmp	r3, #24
 80033ae:	d137      	bne.n	8003420 <HAL_RCC_OscConfig+0x1c8>
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d132      	bne.n	8003420 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ba:	4b4e      	ldr	r3, [pc, #312]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_RCC_OscConfig+0x17a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e2e3      	b.n	800399a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033d2:	4b48      	ldr	r3, [pc, #288]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 0219 	bic.w	r2, r3, #25
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	4945      	ldr	r1, [pc, #276]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033e4:	f7fd fcf0 	bl	8000dc8 <HAL_GetTick>
 80033e8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ec:	f7fd fcec 	bl	8000dc8 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e2cd      	b.n	800399a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340a:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	061b      	lsls	r3, r3, #24
 8003418:	4936      	ldr	r1, [pc, #216]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800341e:	e043      	b.n	80034a8 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d026      	beq.n	8003476 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003428:	4b32      	ldr	r3, [pc, #200]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f023 0219 	bic.w	r2, r3, #25
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	492f      	ldr	r1, [pc, #188]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fd fcc5 	bl	8000dc8 <HAL_GetTick>
 800343e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003442:	f7fd fcc1 	bl	8000dc8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e2a2      	b.n	800399a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	4921      	ldr	r1, [pc, #132]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]
 8003474:	e018      	b.n	80034a8 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fd fca1 	bl	8000dc8 <HAL_GetTick>
 8003486:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348a:	f7fd fc9d 	bl	8000dc8 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e27e      	b.n	800399a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800349c:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d06d      	beq.n	8003590 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d007      	beq.n	80034da <HAL_RCC_OscConfig+0x282>
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b18      	cmp	r3, #24
 80034ce:	d11e      	bne.n	800350e <HAL_RCC_OscConfig+0x2b6>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d119      	bne.n	800350e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_RCC_OscConfig+0x29c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_RCC_OscConfig+0x2a0>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d004      	beq.n	80034f8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e253      	b.n	800399a <HAL_RCC_OscConfig+0x742>
 80034f2:	bf00      	nop
 80034f4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034f8:	4ba3      	ldr	r3, [pc, #652]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	061b      	lsls	r3, r3, #24
 8003506:	49a0      	ldr	r1, [pc, #640]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003508:	4313      	orrs	r3, r2
 800350a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800350c:	e040      	b.n	8003590 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d023      	beq.n	800355e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003516:	4b9c      	ldr	r3, [pc, #624]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a9b      	ldr	r2, [pc, #620]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 800351c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003522:	f7fd fc51 	bl	8000dc8 <HAL_GetTick>
 8003526:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800352a:	f7fd fc4d 	bl	8000dc8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e22e      	b.n	800399a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800353c:	4b92      	ldr	r3, [pc, #584]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003548:	4b8f      	ldr	r3, [pc, #572]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	498c      	ldr	r1, [pc, #560]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003558:	4313      	orrs	r3, r2
 800355a:	60cb      	str	r3, [r1, #12]
 800355c:	e018      	b.n	8003590 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800355e:	4b8a      	ldr	r3, [pc, #552]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a89      	ldr	r2, [pc, #548]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fd fc2d 	bl	8000dc8 <HAL_GetTick>
 800356e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003572:	f7fd fc29 	bl	8000dc8 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e20a      	b.n	800399a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003584:	4b80      	ldr	r3, [pc, #512]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d036      	beq.n	800360a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d019      	beq.n	80035d8 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a4:	4b78      	ldr	r3, [pc, #480]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 80035a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a8:	4a77      	ldr	r2, [pc, #476]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7fd fc0a 	bl	8000dc8 <HAL_GetTick>
 80035b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b8:	f7fd fc06 	bl	8000dc8 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e1e7      	b.n	800399a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035ca:	4b6f      	ldr	r3, [pc, #444]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 80035cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x360>
 80035d6:	e018      	b.n	800360a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d8:	4b6b      	ldr	r3, [pc, #428]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 80035da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035dc:	4a6a      	ldr	r2, [pc, #424]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7fd fbf0 	bl	8000dc8 <HAL_GetTick>
 80035e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ec:	f7fd fbec 	bl	8000dc8 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e1cd      	b.n	800399a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035fe:	4b62      	ldr	r3, [pc, #392]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d036      	beq.n	8003684 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d019      	beq.n	8003652 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800361e:	4b5a      	ldr	r3, [pc, #360]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a59      	ldr	r2, [pc, #356]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003628:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800362a:	f7fd fbcd 	bl	8000dc8 <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003632:	f7fd fbc9 	bl	8000dc8 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e1aa      	b.n	800399a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x3da>
 8003650:	e018      	b.n	8003684 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003652:	4b4d      	ldr	r3, [pc, #308]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a4c      	ldr	r2, [pc, #304]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800365c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800365e:	f7fd fbb3 	bl	8000dc8 <HAL_GetTick>
 8003662:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003666:	f7fd fbaf 	bl	8000dc8 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e190      	b.n	800399a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003678:	4b43      	ldr	r3, [pc, #268]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8085 	beq.w	800379c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003692:	4b3e      	ldr	r3, [pc, #248]	; (800378c <HAL_RCC_OscConfig+0x534>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a3d      	ldr	r2, [pc, #244]	; (800378c <HAL_RCC_OscConfig+0x534>)
 8003698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800369e:	f7fd fb93 	bl	8000dc8 <HAL_GetTick>
 80036a2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036a6:	f7fd fb8f 	bl	8000dc8 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b64      	cmp	r3, #100	; 0x64
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e170      	b.n	800399a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036b8:	4b34      	ldr	r3, [pc, #208]	; (800378c <HAL_RCC_OscConfig+0x534>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d106      	bne.n	80036da <HAL_RCC_OscConfig+0x482>
 80036cc:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	4a2d      	ldr	r2, [pc, #180]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6713      	str	r3, [r2, #112]	; 0x70
 80036d8:	e02d      	b.n	8003736 <HAL_RCC_OscConfig+0x4de>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0x4a4>
 80036e2:	4b29      	ldr	r3, [pc, #164]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a28      	ldr	r2, [pc, #160]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	4b26      	ldr	r3, [pc, #152]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	4a25      	ldr	r2, [pc, #148]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	6713      	str	r3, [r2, #112]	; 0x70
 80036fa:	e01c      	b.n	8003736 <HAL_RCC_OscConfig+0x4de>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b05      	cmp	r3, #5
 8003702:	d10c      	bne.n	800371e <HAL_RCC_OscConfig+0x4c6>
 8003704:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 800370a:	f043 0304 	orr.w	r3, r3, #4
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	4a1c      	ldr	r2, [pc, #112]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6713      	str	r3, [r2, #112]	; 0x70
 800371c:	e00b      	b.n	8003736 <HAL_RCC_OscConfig+0x4de>
 800371e:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a19      	ldr	r2, [pc, #100]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003724:	f023 0301 	bic.w	r3, r3, #1
 8003728:	6713      	str	r3, [r2, #112]	; 0x70
 800372a:	4b17      	ldr	r3, [pc, #92]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4a16      	ldr	r2, [pc, #88]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 8003730:	f023 0304 	bic.w	r3, r3, #4
 8003734:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d015      	beq.n	800376a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373e:	f7fd fb43 	bl	8000dc8 <HAL_GetTick>
 8003742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003744:	e00a      	b.n	800375c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fd fb3f 	bl	8000dc8 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	; 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e11e      	b.n	800399a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <HAL_RCC_OscConfig+0x530>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ee      	beq.n	8003746 <HAL_RCC_OscConfig+0x4ee>
 8003768:	e018      	b.n	800379c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7fd fb2d 	bl	8000dc8 <HAL_GetTick>
 800376e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003770:	e00e      	b.n	8003790 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003772:	f7fd fb29 	bl	8000dc8 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003780:	4293      	cmp	r3, r2
 8003782:	d905      	bls.n	8003790 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e108      	b.n	800399a <HAL_RCC_OscConfig+0x742>
 8003788:	58024400 	.word	0x58024400
 800378c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003790:	4b84      	ldr	r3, [pc, #528]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ea      	bne.n	8003772 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80f9 	beq.w	8003998 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80037a6:	4b7f      	ldr	r3, [pc, #508]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ae:	2b18      	cmp	r3, #24
 80037b0:	f000 80b4 	beq.w	800391c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	f040 8095 	bne.w	80038e8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	4b79      	ldr	r3, [pc, #484]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a78      	ldr	r2, [pc, #480]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 80037c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7fd fafd 	bl	8000dc8 <HAL_GetTick>
 80037ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d2:	f7fd faf9 	bl	8000dc8 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e0da      	b.n	800399a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037e4:	4b6f      	ldr	r3, [pc, #444]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f0      	bne.n	80037d2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f0:	4b6c      	ldr	r3, [pc, #432]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 80037f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037f4:	4b6c      	ldr	r3, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x750>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003800:	0112      	lsls	r2, r2, #4
 8003802:	430a      	orrs	r2, r1
 8003804:	4967      	ldr	r1, [pc, #412]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 8003806:	4313      	orrs	r3, r2
 8003808:	628b      	str	r3, [r1, #40]	; 0x28
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	3b01      	subs	r3, #1
 8003810:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003818:	3b01      	subs	r3, #1
 800381a:	025b      	lsls	r3, r3, #9
 800381c:	b29b      	uxth	r3, r3
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	3b01      	subs	r3, #1
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	3b01      	subs	r3, #1
 8003834:	061b      	lsls	r3, r3, #24
 8003836:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800383a:	495a      	ldr	r1, [pc, #360]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 800383c:	4313      	orrs	r3, r2
 800383e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003840:	4b58      	ldr	r3, [pc, #352]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	4a57      	ldr	r2, [pc, #348]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 8003846:	f023 0301 	bic.w	r3, r3, #1
 800384a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800384c:	4b55      	ldr	r3, [pc, #340]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 800384e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003850:	4b56      	ldr	r3, [pc, #344]	; (80039ac <HAL_RCC_OscConfig+0x754>)
 8003852:	4013      	ands	r3, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003858:	00d2      	lsls	r2, r2, #3
 800385a:	4952      	ldr	r1, [pc, #328]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003860:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	f023 020c 	bic.w	r2, r3, #12
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	494d      	ldr	r1, [pc, #308]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 800386e:	4313      	orrs	r3, r2
 8003870:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003872:	4b4c      	ldr	r3, [pc, #304]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	f023 0202 	bic.w	r2, r3, #2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	4949      	ldr	r1, [pc, #292]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 8003880:	4313      	orrs	r3, r2
 8003882:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003884:	4b47      	ldr	r3, [pc, #284]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	4a46      	ldr	r2, [pc, #280]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 800388a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003890:	4b44      	ldr	r3, [pc, #272]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a43      	ldr	r2, [pc, #268]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 8003896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800389c:	4b41      	ldr	r3, [pc, #260]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	4a40      	ldr	r2, [pc, #256]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 80038a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80038a8:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	4a3d      	ldr	r2, [pc, #244]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b4:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a3a      	ldr	r2, [pc, #232]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 80038ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fd fa82 	bl	8000dc8 <HAL_GetTick>
 80038c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c8:	f7fd fa7e 	bl	8000dc8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e05f      	b.n	800399a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038da:	4b32      	ldr	r3, [pc, #200]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x670>
 80038e6:	e057      	b.n	8003998 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e8:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2d      	ldr	r2, [pc, #180]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 80038ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fd fa68 	bl	8000dc8 <HAL_GetTick>
 80038f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fd fa64 	bl	8000dc8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e045      	b.n	800399a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800390e:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x6a4>
 800391a:	e03d      	b.n	8003998 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800391c:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <HAL_RCC_OscConfig+0x74c>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	2b01      	cmp	r3, #1
 800392e:	d031      	beq.n	8003994 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f003 0203 	and.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d12a      	bne.n	8003994 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d122      	bne.n	8003994 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d11a      	bne.n	8003994 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	0a5b      	lsrs	r3, r3, #9
 8003962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d111      	bne.n	8003994 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d108      	bne.n	8003994 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	0e1b      	lsrs	r3, r3, #24
 8003986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3730      	adds	r7, #48	; 0x30
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	58024400 	.word	0x58024400
 80039a8:	fffffc0c 	.word	0xfffffc0c
 80039ac:	ffff0007 	.word	0xffff0007

080039b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e19c      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b8a      	ldr	r3, [pc, #552]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d910      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b87      	ldr	r3, [pc, #540]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 020f 	bic.w	r2, r3, #15
 80039da:	4985      	ldr	r1, [pc, #532]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b83      	ldr	r3, [pc, #524]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e184      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d010      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	4b7b      	ldr	r3, [pc, #492]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d908      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a10:	4b78      	ldr	r3, [pc, #480]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	4975      	ldr	r1, [pc, #468]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d010      	beq.n	8003a50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	4b70      	ldr	r3, [pc, #448]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d908      	bls.n	8003a50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a3e:	4b6d      	ldr	r3, [pc, #436]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	496a      	ldr	r1, [pc, #424]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d010      	beq.n	8003a7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	4b64      	ldr	r3, [pc, #400]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d908      	bls.n	8003a7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a6c:	4b61      	ldr	r3, [pc, #388]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	495e      	ldr	r1, [pc, #376]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d010      	beq.n	8003aac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d908      	bls.n	8003aac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a9a:	4b56      	ldr	r3, [pc, #344]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	4953      	ldr	r1, [pc, #332]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d010      	beq.n	8003ada <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	4b4d      	ldr	r3, [pc, #308]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d908      	bls.n	8003ada <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac8:	4b4a      	ldr	r3, [pc, #296]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f023 020f 	bic.w	r2, r3, #15
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4947      	ldr	r1, [pc, #284]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d055      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ae6:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	4940      	ldr	r1, [pc, #256]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b00:	4b3c      	ldr	r3, [pc, #240]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d121      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0f6      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b18:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d115      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0ea      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b30:	4b30      	ldr	r3, [pc, #192]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d109      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0de      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b40:	4b2c      	ldr	r3, [pc, #176]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0d6      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b50:	4b28      	ldr	r3, [pc, #160]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f023 0207 	bic.w	r2, r3, #7
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4925      	ldr	r1, [pc, #148]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7fd f931 	bl	8000dc8 <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b68:	e00a      	b.n	8003b80 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6a:	f7fd f92d 	bl	8000dc8 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e0be      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b80:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d1eb      	bne.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d010      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d208      	bcs.n	8003bc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bae:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f023 020f 	bic.w	r2, r3, #15
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	490e      	ldr	r1, [pc, #56]	; (8003bf4 <HAL_RCC_ClockConfig+0x244>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d214      	bcs.n	8003bf8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 020f 	bic.w	r2, r3, #15
 8003bd6:	4906      	ldr	r1, [pc, #24]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <HAL_RCC_ClockConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e086      	b.n	8003cfe <HAL_RCC_ClockConfig+0x34e>
 8003bf0:	52002000 	.word	0x52002000
 8003bf4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d010      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	4b3f      	ldr	r3, [pc, #252]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d208      	bcs.n	8003c26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c14:	4b3c      	ldr	r3, [pc, #240]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	4939      	ldr	r1, [pc, #228]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d010      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	4b34      	ldr	r3, [pc, #208]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d208      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c42:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	492e      	ldr	r1, [pc, #184]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d010      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699a      	ldr	r2, [r3, #24]
 8003c64:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d208      	bcs.n	8003c82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c70:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	4922      	ldr	r1, [pc, #136]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d010      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d208      	bcs.n	8003cb0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4917      	ldr	r1, [pc, #92]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cb0:	f000 f834 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	4912      	ldr	r1, [pc, #72]	; (8003d0c <HAL_RCC_ClockConfig+0x35c>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ccc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cce:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <HAL_RCC_ClockConfig+0x358>)
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	4a0d      	ldr	r2, [pc, #52]	; (8003d0c <HAL_RCC_ClockConfig+0x35c>)
 8003cd8:	5cd3      	ldrb	r3, [r2, r3]
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <HAL_RCC_ClockConfig+0x360>)
 8003ce6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <HAL_RCC_ClockConfig+0x364>)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_RCC_ClockConfig+0x368>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd f81e 	bl	8000d34 <HAL_InitTick>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	58024400 	.word	0x58024400
 8003d0c:	08007b40 	.word	0x08007b40
 8003d10:	24000004 	.word	0x24000004
 8003d14:	24000000 	.word	0x24000000
 8003d18:	24000008 	.word	0x24000008

08003d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d22:	4bb3      	ldr	r3, [pc, #716]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d2a:	2b18      	cmp	r3, #24
 8003d2c:	f200 8155 	bhi.w	8003fda <HAL_RCC_GetSysClockFreq+0x2be>
 8003d30:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d9d 	.word	0x08003d9d
 8003d3c:	08003fdb 	.word	0x08003fdb
 8003d40:	08003fdb 	.word	0x08003fdb
 8003d44:	08003fdb 	.word	0x08003fdb
 8003d48:	08003fdb 	.word	0x08003fdb
 8003d4c:	08003fdb 	.word	0x08003fdb
 8003d50:	08003fdb 	.word	0x08003fdb
 8003d54:	08003fdb 	.word	0x08003fdb
 8003d58:	08003dc3 	.word	0x08003dc3
 8003d5c:	08003fdb 	.word	0x08003fdb
 8003d60:	08003fdb 	.word	0x08003fdb
 8003d64:	08003fdb 	.word	0x08003fdb
 8003d68:	08003fdb 	.word	0x08003fdb
 8003d6c:	08003fdb 	.word	0x08003fdb
 8003d70:	08003fdb 	.word	0x08003fdb
 8003d74:	08003fdb 	.word	0x08003fdb
 8003d78:	08003dc9 	.word	0x08003dc9
 8003d7c:	08003fdb 	.word	0x08003fdb
 8003d80:	08003fdb 	.word	0x08003fdb
 8003d84:	08003fdb 	.word	0x08003fdb
 8003d88:	08003fdb 	.word	0x08003fdb
 8003d8c:	08003fdb 	.word	0x08003fdb
 8003d90:	08003fdb 	.word	0x08003fdb
 8003d94:	08003fdb 	.word	0x08003fdb
 8003d98:	08003dcf 	.word	0x08003dcf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d9c:	4b94      	ldr	r3, [pc, #592]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d009      	beq.n	8003dbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003da8:	4b91      	ldr	r3, [pc, #580]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	08db      	lsrs	r3, r3, #3
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	4a90      	ldr	r2, [pc, #576]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
 8003db8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003dba:	e111      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003dbc:	4b8d      	ldr	r3, [pc, #564]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003dbe:	61bb      	str	r3, [r7, #24]
    break;
 8003dc0:	e10e      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003dc2:	4b8d      	ldr	r3, [pc, #564]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003dc4:	61bb      	str	r3, [r7, #24]
    break;
 8003dc6:	e10b      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003dc8:	4b8c      	ldr	r3, [pc, #560]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003dca:	61bb      	str	r3, [r7, #24]
    break;
 8003dcc:	e108      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dce:	4b88      	ldr	r3, [pc, #544]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003dd8:	4b85      	ldr	r3, [pc, #532]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003de4:	4b82      	ldr	r3, [pc, #520]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003dee:	4b80      	ldr	r3, [pc, #512]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df2:	08db      	lsrs	r3, r3, #3
 8003df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80e1 	beq.w	8003fd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	f000 8083 	beq.w	8003f20 <HAL_RCC_GetSysClockFreq+0x204>
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	f200 80a1 	bhi.w	8003f64 <HAL_RCC_GetSysClockFreq+0x248>
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x114>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d056      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e2e:	e099      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e30:	4b6f      	ldr	r3, [pc, #444]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d02d      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e3c:	4b6c      	ldr	r3, [pc, #432]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	08db      	lsrs	r3, r3, #3
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	4a6b      	ldr	r2, [pc, #428]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	ee07 3a90 	vmov	s15, r3
 8003e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e66:	4b62      	ldr	r3, [pc, #392]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e96:	e087      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004004 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eaa:	4b51      	ldr	r3, [pc, #324]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ebe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eda:	e065      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eee:	4b40      	ldr	r3, [pc, #256]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f1e:	e043      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800400c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f32:	4b2f      	ldr	r3, [pc, #188]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f62:	e021      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f76:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fa6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	0a5b      	lsrs	r3, r3, #9
 8003fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fcc:	ee17 3a90 	vmov	r3, s15
 8003fd0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003fd2:	e005      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61bb      	str	r3, [r7, #24]
    break;
 8003fd8:	e002      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fdc:	61bb      	str	r3, [r7, #24]
    break;
 8003fde:	bf00      	nop
  }

  return sysclockfreq;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3724      	adds	r7, #36	; 0x24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	03d09000 	.word	0x03d09000
 8003ff8:	003d0900 	.word	0x003d0900
 8003ffc:	017d7840 	.word	0x017d7840
 8004000:	46000000 	.word	0x46000000
 8004004:	4c742400 	.word	0x4c742400
 8004008:	4a742400 	.word	0x4a742400
 800400c:	4bbebc20 	.word	0x4bbebc20

08004010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004016:	f7ff fe81 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 800401a:	4602      	mov	r2, r0
 800401c:	4b10      	ldr	r3, [pc, #64]	; (8004060 <HAL_RCC_GetHCLKFreq+0x50>)
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	0a1b      	lsrs	r3, r3, #8
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	490f      	ldr	r1, [pc, #60]	; (8004064 <HAL_RCC_GetHCLKFreq+0x54>)
 8004028:	5ccb      	ldrb	r3, [r1, r3]
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_RCC_GetHCLKFreq+0x50>)
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	4a09      	ldr	r2, [pc, #36]	; (8004064 <HAL_RCC_GetHCLKFreq+0x54>)
 800403e:	5cd3      	ldrb	r3, [r2, r3]
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	fa22 f303 	lsr.w	r3, r2, r3
 800404a:	4a07      	ldr	r2, [pc, #28]	; (8004068 <HAL_RCC_GetHCLKFreq+0x58>)
 800404c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800404e:	4a07      	ldr	r2, [pc, #28]	; (800406c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <HAL_RCC_GetHCLKFreq+0x58>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	58024400 	.word	0x58024400
 8004064:	08007b40 	.word	0x08007b40
 8004068:	24000004 	.word	0x24000004
 800406c:	24000000 	.word	0x24000000

08004070 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004078:	2300      	movs	r3, #0
 800407a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800407c:	2300      	movs	r3, #0
 800407e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d03f      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004090:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004094:	d02a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004096:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800409a:	d824      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800409c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a0:	d018      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a6:	d81e      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b0:	d007      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040b2:	e018      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b4:	4bab      	ldr	r3, [pc, #684]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	4aaa      	ldr	r2, [pc, #680]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040c0:	e015      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	2102      	movs	r1, #2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f001 feff 	bl	8005ecc <RCCEx_PLL2_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040d2:	e00c      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3324      	adds	r3, #36	; 0x24
 80040d8:	2102      	movs	r1, #2
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 ffa8 	bl	8006030 <RCCEx_PLL3_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040e4:	e003      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	75fb      	strb	r3, [r7, #23]
      break;
 80040ea:	e000      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ee:	7dfb      	ldrb	r3, [r7, #23]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80040f4:	4b9b      	ldr	r3, [pc, #620]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004100:	4998      	ldr	r1, [pc, #608]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	650b      	str	r3, [r1, #80]	; 0x50
 8004106:	e001      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d03d      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411c:	2b04      	cmp	r3, #4
 800411e:	d826      	bhi.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	0800413d 	.word	0x0800413d
 800412c:	0800414b 	.word	0x0800414b
 8004130:	0800415d 	.word	0x0800415d
 8004134:	08004175 	.word	0x08004175
 8004138:	08004175 	.word	0x08004175
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800413c:	4b89      	ldr	r3, [pc, #548]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	4a88      	ldr	r2, [pc, #544]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004146:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004148:	e015      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	2100      	movs	r1, #0
 8004150:	4618      	mov	r0, r3
 8004152:	f001 febb 	bl	8005ecc <RCCEx_PLL2_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800415a:	e00c      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3324      	adds	r3, #36	; 0x24
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f001 ff64 	bl	8006030 <RCCEx_PLL3_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800416c:	e003      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	75fb      	strb	r3, [r7, #23]
      break;
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004176:	7dfb      	ldrb	r3, [r7, #23]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800417c:	4b79      	ldr	r3, [pc, #484]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800417e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004180:	f023 0207 	bic.w	r2, r3, #7
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	4976      	ldr	r1, [pc, #472]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800418a:	4313      	orrs	r3, r2
 800418c:	650b      	str	r3, [r1, #80]	; 0x50
 800418e:	e001      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	2b00      	cmp	r3, #0
 800419e:	d051      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041a6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80041aa:	d036      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041ac:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80041b0:	d830      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041b6:	d032      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80041b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041bc:	d82a      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041c2:	d02e      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80041c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041c8:	d824      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ce:	d018      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80041d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d4:	d81e      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80041da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041de:	d007      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80041e0:	e018      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e2:	4b60      	ldr	r3, [pc, #384]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	4a5f      	ldr	r2, [pc, #380]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041ee:	e019      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 fe68 	bl	8005ecc <RCCEx_PLL2_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004200:	e010      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3324      	adds	r3, #36	; 0x24
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f001 ff11 	bl	8006030 <RCCEx_PLL3_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004212:	e007      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	75fb      	strb	r3, [r7, #23]
      break;
 8004218:	e004      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800421a:	bf00      	nop
 800421c:	e002      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004224:	7dfb      	ldrb	r3, [r7, #23]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800422a:	4b4e      	ldr	r3, [pc, #312]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004238:	494a      	ldr	r1, [pc, #296]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800423a:	4313      	orrs	r3, r2
 800423c:	658b      	str	r3, [r1, #88]	; 0x58
 800423e:	e001      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424c:	2b00      	cmp	r3, #0
 800424e:	d051      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004256:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800425a:	d036      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800425c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004260:	d830      	bhi.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004262:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004266:	d032      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800426c:	d82a      	bhi.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800426e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004272:	d02e      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004274:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004278:	d824      	bhi.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800427a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800427e:	d018      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004280:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004284:	d81e      	bhi.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800428a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800428e:	d007      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004290:	e018      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004292:	4b34      	ldr	r3, [pc, #208]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	4a33      	ldr	r2, [pc, #204]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800429e:	e019      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	2100      	movs	r1, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 fe10 	bl	8005ecc <RCCEx_PLL2_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80042b0:	e010      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3324      	adds	r3, #36	; 0x24
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 feb9 	bl	8006030 <RCCEx_PLL3_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042c2:	e007      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	75fb      	strb	r3, [r7, #23]
      break;
 80042c8:	e004      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042ca:	bf00      	nop
 80042cc:	e002      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042ce:	bf00      	nop
 80042d0:	e000      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80042da:	4b22      	ldr	r3, [pc, #136]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042de:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042e8:	491e      	ldr	r1, [pc, #120]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	658b      	str	r3, [r1, #88]	; 0x58
 80042ee:	e001      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
 80042f2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d035      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004304:	2b30      	cmp	r3, #48	; 0x30
 8004306:	d01c      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004308:	2b30      	cmp	r3, #48	; 0x30
 800430a:	d817      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d00c      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d813      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d016      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004318:	2b10      	cmp	r3, #16
 800431a:	d10f      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800431c:	4b11      	ldr	r3, [pc, #68]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	4a10      	ldr	r2, [pc, #64]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004326:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004328:	e00e      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	2102      	movs	r1, #2
 8004330:	4618      	mov	r0, r3
 8004332:	f001 fdcb 	bl	8005ecc <RCCEx_PLL2_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800433a:	e005      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	75fb      	strb	r3, [r7, #23]
      break;
 8004340:	e002      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004342:	bf00      	nop
 8004344:	e000      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10c      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800434e:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004352:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435a:	4902      	ldr	r1, [pc, #8]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800435c:	4313      	orrs	r3, r2
 800435e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004360:	e004      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004362:	bf00      	nop
 8004364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d047      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004380:	d030      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004386:	d82a      	bhi.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004388:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800438c:	d02c      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800438e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004392:	d824      	bhi.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004398:	d018      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800439a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800439e:	d81e      	bhi.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80043a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a8:	d007      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043aa:	e018      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ac:	4bac      	ldr	r3, [pc, #688]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	4aab      	ldr	r2, [pc, #684]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043b8:	e017      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3304      	adds	r3, #4
 80043be:	2100      	movs	r1, #0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f001 fd83 	bl	8005ecc <RCCEx_PLL2_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043ca:	e00e      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3324      	adds	r3, #36	; 0x24
 80043d0:	2100      	movs	r1, #0
 80043d2:	4618      	mov	r0, r3
 80043d4:	f001 fe2c 	bl	8006030 <RCCEx_PLL3_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043dc:	e005      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	75fb      	strb	r3, [r7, #23]
      break;
 80043e2:	e002      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80043e4:	bf00      	nop
 80043e6:	e000      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80043e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80043f0:	4b9b      	ldr	r3, [pc, #620]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fc:	4998      	ldr	r1, [pc, #608]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	650b      	str	r3, [r1, #80]	; 0x50
 8004402:	e001      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d049      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800441c:	d02e      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800441e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004422:	d828      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004424:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004428:	d02a      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800442a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800442e:	d822      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004430:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004434:	d026      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004436:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800443a:	d81c      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800443c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004440:	d010      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004446:	d816      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01d      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004450:	d111      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3304      	adds	r3, #4
 8004456:	2101      	movs	r1, #1
 8004458:	4618      	mov	r0, r3
 800445a:	f001 fd37 	bl	8005ecc <RCCEx_PLL2_Config>
 800445e:	4603      	mov	r3, r0
 8004460:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004462:	e012      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3324      	adds	r3, #36	; 0x24
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f001 fde0 	bl	8006030 <RCCEx_PLL3_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004474:	e009      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	75fb      	strb	r3, [r7, #23]
      break;
 800447a:	e006      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800447c:	bf00      	nop
 800447e:	e004      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004480:	bf00      	nop
 8004482:	e002      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004484:	bf00      	nop
 8004486:	e000      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800448a:	7dfb      	ldrb	r3, [r7, #23]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d109      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004490:	4b73      	ldr	r3, [pc, #460]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004494:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449c:	4970      	ldr	r1, [pc, #448]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	650b      	str	r3, [r1, #80]	; 0x50
 80044a2:	e001      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d04b      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044be:	d02e      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80044c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044c4:	d828      	bhi.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ca:	d02a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80044cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d0:	d822      	bhi.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044d6:	d026      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80044d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044dc:	d81c      	bhi.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044e2:	d010      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80044e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044e8:	d816      	bhi.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01d      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80044ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044f2:	d111      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	2101      	movs	r1, #1
 80044fa:	4618      	mov	r0, r3
 80044fc:	f001 fce6 	bl	8005ecc <RCCEx_PLL2_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004504:	e012      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3324      	adds	r3, #36	; 0x24
 800450a:	2101      	movs	r1, #1
 800450c:	4618      	mov	r0, r3
 800450e:	f001 fd8f 	bl	8006030 <RCCEx_PLL3_Config>
 8004512:	4603      	mov	r3, r0
 8004514:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004516:	e009      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	75fb      	strb	r3, [r7, #23]
      break;
 800451c:	e006      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800451e:	bf00      	nop
 8004520:	e004      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004522:	bf00      	nop
 8004524:	e002      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004526:	bf00      	nop
 8004528:	e000      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800452a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004532:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004540:	4947      	ldr	r1, [pc, #284]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	658b      	str	r3, [r1, #88]	; 0x58
 8004546:	e001      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d02f      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800455c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004560:	d00e      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004566:	d814      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004568:	2b00      	cmp	r3, #0
 800456a:	d015      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800456c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004570:	d10f      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004572:	4b3b      	ldr	r3, [pc, #236]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	4a3a      	ldr	r2, [pc, #232]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800457e:	e00c      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f001 fca0 	bl	8005ecc <RCCEx_PLL2_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004590:	e003      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
      break;
 8004596:	e000      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800459a:	7dfb      	ldrb	r3, [r7, #23]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045a0:	4b2f      	ldr	r3, [pc, #188]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ac:	492c      	ldr	r1, [pc, #176]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	650b      	str	r3, [r1, #80]	; 0x50
 80045b2:	e001      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
 80045b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d032      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d81b      	bhi.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80045cc:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	0800460b 	.word	0x0800460b
 80045d8:	080045e5 	.word	0x080045e5
 80045dc:	080045f3 	.word	0x080045f3
 80045e0:	0800460b 	.word	0x0800460b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e4:	4b1e      	ldr	r3, [pc, #120]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	4a1d      	ldr	r2, [pc, #116]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80045f0:	e00c      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3304      	adds	r3, #4
 80045f6:	2102      	movs	r1, #2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f001 fc67 	bl	8005ecc <RCCEx_PLL2_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004602:	e003      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	75fb      	strb	r3, [r7, #23]
      break;
 8004608:	e000      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800460a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004612:	4b13      	ldr	r3, [pc, #76]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004616:	f023 0203 	bic.w	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	4910      	ldr	r1, [pc, #64]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004620:	4313      	orrs	r3, r2
 8004622:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004624:	e001      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 808a 	beq.w	800474c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a09      	ldr	r2, [pc, #36]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800463e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004644:	f7fc fbc0 	bl	8000dc8 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800464a:	e00d      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464c:	f7fc fbbc 	bl	8000dc8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	; 0x64
 8004658:	d906      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	75fb      	strb	r3, [r7, #23]
        break;
 800465e:	e009      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004660:	58024400 	.word	0x58024400
 8004664:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004668:	4bb9      	ldr	r3, [pc, #740]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0eb      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d166      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800467a:	4bb6      	ldr	r3, [pc, #728]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800467c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004684:	4053      	eors	r3, r2
 8004686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468a:	2b00      	cmp	r3, #0
 800468c:	d013      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800468e:	4bb1      	ldr	r3, [pc, #708]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004696:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004698:	4bae      	ldr	r3, [pc, #696]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	4aad      	ldr	r2, [pc, #692]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800469e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046a4:	4bab      	ldr	r3, [pc, #684]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	4aaa      	ldr	r2, [pc, #680]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80046b0:	4aa8      	ldr	r2, [pc, #672]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c0:	d115      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c2:	f7fc fb81 	bl	8000dc8 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046c8:	e00b      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fc fb7d 	bl	8000dc8 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d8:	4293      	cmp	r3, r2
 80046da:	d902      	bls.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	75fb      	strb	r3, [r7, #23]
            break;
 80046e0:	e005      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046e2:	4b9c      	ldr	r3, [pc, #624]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0ed      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d126      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004702:	d10d      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004704:	4b93      	ldr	r3, [pc, #588]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004712:	0919      	lsrs	r1, r3, #4
 8004714:	4b90      	ldr	r3, [pc, #576]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004716:	400b      	ands	r3, r1
 8004718:	498e      	ldr	r1, [pc, #568]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	610b      	str	r3, [r1, #16]
 800471e:	e005      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004720:	4b8c      	ldr	r3, [pc, #560]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	4a8b      	ldr	r2, [pc, #556]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004726:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800472a:	6113      	str	r3, [r2, #16]
 800472c:	4b89      	ldr	r3, [pc, #548]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800472e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800473a:	4986      	ldr	r1, [pc, #536]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	670b      	str	r3, [r1, #112]	; 0x70
 8004740:	e004      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004742:	7dfb      	ldrb	r3, [r7, #23]
 8004744:	75bb      	strb	r3, [r7, #22]
 8004746:	e001      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d07e      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475c:	2b28      	cmp	r3, #40	; 0x28
 800475e:	d867      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004760:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	08004837 	.word	0x08004837
 800476c:	08004831 	.word	0x08004831
 8004770:	08004831 	.word	0x08004831
 8004774:	08004831 	.word	0x08004831
 8004778:	08004831 	.word	0x08004831
 800477c:	08004831 	.word	0x08004831
 8004780:	08004831 	.word	0x08004831
 8004784:	08004831 	.word	0x08004831
 8004788:	0800480d 	.word	0x0800480d
 800478c:	08004831 	.word	0x08004831
 8004790:	08004831 	.word	0x08004831
 8004794:	08004831 	.word	0x08004831
 8004798:	08004831 	.word	0x08004831
 800479c:	08004831 	.word	0x08004831
 80047a0:	08004831 	.word	0x08004831
 80047a4:	08004831 	.word	0x08004831
 80047a8:	0800481f 	.word	0x0800481f
 80047ac:	08004831 	.word	0x08004831
 80047b0:	08004831 	.word	0x08004831
 80047b4:	08004831 	.word	0x08004831
 80047b8:	08004831 	.word	0x08004831
 80047bc:	08004831 	.word	0x08004831
 80047c0:	08004831 	.word	0x08004831
 80047c4:	08004831 	.word	0x08004831
 80047c8:	08004837 	.word	0x08004837
 80047cc:	08004831 	.word	0x08004831
 80047d0:	08004831 	.word	0x08004831
 80047d4:	08004831 	.word	0x08004831
 80047d8:	08004831 	.word	0x08004831
 80047dc:	08004831 	.word	0x08004831
 80047e0:	08004831 	.word	0x08004831
 80047e4:	08004831 	.word	0x08004831
 80047e8:	08004837 	.word	0x08004837
 80047ec:	08004831 	.word	0x08004831
 80047f0:	08004831 	.word	0x08004831
 80047f4:	08004831 	.word	0x08004831
 80047f8:	08004831 	.word	0x08004831
 80047fc:	08004831 	.word	0x08004831
 8004800:	08004831 	.word	0x08004831
 8004804:	08004831 	.word	0x08004831
 8004808:	08004837 	.word	0x08004837
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	2101      	movs	r1, #1
 8004812:	4618      	mov	r0, r3
 8004814:	f001 fb5a 	bl	8005ecc <RCCEx_PLL2_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800481c:	e00c      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3324      	adds	r3, #36	; 0x24
 8004822:	2101      	movs	r1, #1
 8004824:	4618      	mov	r0, r3
 8004826:	f001 fc03 	bl	8006030 <RCCEx_PLL3_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800482e:	e003      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	75fb      	strb	r3, [r7, #23]
      break;
 8004834:	e000      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8004836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800483e:	4b45      	ldr	r3, [pc, #276]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484a:	4942      	ldr	r1, [pc, #264]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800484c:	4313      	orrs	r3, r2
 800484e:	654b      	str	r3, [r1, #84]	; 0x54
 8004850:	e001      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004852:	7dfb      	ldrb	r3, [r7, #23]
 8004854:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d037      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	2b05      	cmp	r3, #5
 8004868:	d820      	bhi.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	080048b3 	.word	0x080048b3
 8004874:	08004889 	.word	0x08004889
 8004878:	0800489b 	.word	0x0800489b
 800487c:	080048b3 	.word	0x080048b3
 8004880:	080048b3 	.word	0x080048b3
 8004884:	080048b3 	.word	0x080048b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	2101      	movs	r1, #1
 800488e:	4618      	mov	r0, r3
 8004890:	f001 fb1c 	bl	8005ecc <RCCEx_PLL2_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004898:	e00c      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3324      	adds	r3, #36	; 0x24
 800489e:	2101      	movs	r1, #1
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 fbc5 	bl	8006030 <RCCEx_PLL3_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048aa:	e003      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	75fb      	strb	r3, [r7, #23]
      break;
 80048b0:	e000      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80048b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80048ba:	4b26      	ldr	r3, [pc, #152]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	f023 0207 	bic.w	r2, r3, #7
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c6:	4923      	ldr	r1, [pc, #140]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	654b      	str	r3, [r1, #84]	; 0x54
 80048cc:	e001      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
 80048d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d040      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d821      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004933 	.word	0x08004933
 80048f4:	08004909 	.word	0x08004909
 80048f8:	0800491b 	.word	0x0800491b
 80048fc:	08004933 	.word	0x08004933
 8004900:	08004933 	.word	0x08004933
 8004904:	08004933 	.word	0x08004933
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3304      	adds	r3, #4
 800490c:	2101      	movs	r1, #1
 800490e:	4618      	mov	r0, r3
 8004910:	f001 fadc 	bl	8005ecc <RCCEx_PLL2_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004918:	e00c      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3324      	adds	r3, #36	; 0x24
 800491e:	2101      	movs	r1, #1
 8004920:	4618      	mov	r0, r3
 8004922:	f001 fb85 	bl	8006030 <RCCEx_PLL3_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800492a:	e003      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	75fb      	strb	r3, [r7, #23]
      break;
 8004930:	e000      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004934:	7dfb      	ldrb	r3, [r7, #23]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d110      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	f023 0207 	bic.w	r2, r3, #7
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004948:	4902      	ldr	r1, [pc, #8]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800494a:	4313      	orrs	r3, r2
 800494c:	658b      	str	r3, [r1, #88]	; 0x58
 800494e:	e007      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004950:	58024800 	.word	0x58024800
 8004954:	58024400 	.word	0x58024400
 8004958:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495c:	7dfb      	ldrb	r3, [r7, #23]
 800495e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	2b00      	cmp	r3, #0
 800496a:	d04b      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004972:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004976:	d02e      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800497c:	d828      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800497e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004982:	d02a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004988:	d822      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800498a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800498e:	d026      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004990:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004994:	d81c      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800499a:	d010      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800499c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a0:	d816      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01d      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80049a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049aa:	d111      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3304      	adds	r3, #4
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f001 fa8a 	bl	8005ecc <RCCEx_PLL2_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049bc:	e012      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3324      	adds	r3, #36	; 0x24
 80049c2:	2102      	movs	r1, #2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 fb33 	bl	8006030 <RCCEx_PLL3_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049ce:	e009      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]
      break;
 80049d4:	e006      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049d6:	bf00      	nop
 80049d8:	e004      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049da:	bf00      	nop
 80049dc:	e002      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049de:	bf00      	nop
 80049e0:	e000      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80049e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ea:	4bb2      	ldr	r3, [pc, #712]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f8:	49ae      	ldr	r1, [pc, #696]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	654b      	str	r3, [r1, #84]	; 0x54
 80049fe:	e001      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a00:	7dfb      	ldrb	r3, [r7, #23]
 8004a02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d04b      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a1a:	d02e      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004a1c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a20:	d828      	bhi.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a26:	d02a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2c:	d822      	bhi.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a32:	d026      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004a34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a38:	d81c      	bhi.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3e:	d010      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a44:	d816      	bhi.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01d      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4e:	d111      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3304      	adds	r3, #4
 8004a54:	2100      	movs	r1, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f001 fa38 	bl	8005ecc <RCCEx_PLL2_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a60:	e012      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3324      	adds	r3, #36	; 0x24
 8004a66:	2102      	movs	r1, #2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f001 fae1 	bl	8006030 <RCCEx_PLL3_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a72:	e009      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
      break;
 8004a78:	e006      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a7a:	bf00      	nop
 8004a7c:	e004      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a7e:	bf00      	nop
 8004a80:	e002      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a82:	bf00      	nop
 8004a84:	e000      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10a      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a8e:	4b89      	ldr	r3, [pc, #548]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a9c:	4985      	ldr	r1, [pc, #532]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	658b      	str	r3, [r1, #88]	; 0x58
 8004aa2:	e001      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
 8004aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d04b      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004abe:	d02e      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004ac0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ac4:	d828      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aca:	d02a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad0:	d822      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004ad2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ad6:	d026      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004ad8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004adc:	d81c      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004ade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae2:	d010      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae8:	d816      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01d      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af2:	d111      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3304      	adds	r3, #4
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 f9e6 	bl	8005ecc <RCCEx_PLL2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b04:	e012      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3324      	adds	r3, #36	; 0x24
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f001 fa8f 	bl	8006030 <RCCEx_PLL3_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b16:	e009      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b1c:	e006      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b1e:	bf00      	nop
 8004b20:	e004      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b22:	bf00      	nop
 8004b24:	e002      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b26:	bf00      	nop
 8004b28:	e000      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b32:	4b60      	ldr	r3, [pc, #384]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b40:	495c      	ldr	r1, [pc, #368]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	658b      	str	r3, [r1, #88]	; 0x58
 8004b46:	e001      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
 8004b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d018      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b60:	d10a      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3324      	adds	r3, #36	; 0x24
 8004b66:	2102      	movs	r1, #2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 fa61 	bl	8006030 <RCCEx_PLL3_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004b78:	4b4e      	ldr	r3, [pc, #312]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b84:	494b      	ldr	r1, [pc, #300]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01a      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba0:	d10a      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3324      	adds	r3, #36	; 0x24
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f001 fa41 	bl	8006030 <RCCEx_PLL3_Config>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bb8:	4b3e      	ldr	r3, [pc, #248]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc6:	493b      	ldr	r1, [pc, #236]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d034      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be2:	d01d      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be8:	d817      	bhi.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf2:	d009      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004bf4:	e011      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f001 f965 	bl	8005ecc <RCCEx_PLL2_Config>
 8004c02:	4603      	mov	r3, r0
 8004c04:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c06:	e00c      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3324      	adds	r3, #36	; 0x24
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 fa0e 	bl	8006030 <RCCEx_PLL3_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c18:	e003      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1e:	e000      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c28:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c36:	491f      	ldr	r1, [pc, #124]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	658b      	str	r3, [r1, #88]	; 0x58
 8004c3c:	e001      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d036      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c58:	d01c      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004c5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c5e:	d816      	bhi.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c64:	d003      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c6a:	d007      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004c6c:	e00f      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c6e:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	4a10      	ldr	r2, [pc, #64]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c7a:	e00c      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3324      	adds	r3, #36	; 0x24
 8004c80:	2101      	movs	r1, #1
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 f9d4 	bl	8006030 <RCCEx_PLL3_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c8c:	e003      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	75fb      	strb	r3, [r7, #23]
      break;
 8004c92:	e000      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c96:	7dfb      	ldrb	r3, [r7, #23]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10d      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004caa:	4902      	ldr	r1, [pc, #8]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	654b      	str	r3, [r1, #84]	; 0x54
 8004cb0:	e004      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004cb2:	bf00      	nop
 8004cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d029      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd4:	d007      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004cd6:	e00f      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd8:	4b61      	ldr	r3, [pc, #388]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	4a60      	ldr	r2, [pc, #384]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004ce4:	e00b      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	2102      	movs	r1, #2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 f8ed 	bl	8005ecc <RCCEx_PLL2_Config>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004cf6:	e002      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cfe:	7dfb      	ldrb	r3, [r7, #23]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d04:	4b56      	ldr	r3, [pc, #344]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d10:	4953      	ldr	r1, [pc, #332]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d16:	e001      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
 8004d1a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3324      	adds	r3, #36	; 0x24
 8004d2c:	2102      	movs	r1, #2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 f97e 	bl	8006030 <RCCEx_PLL3_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d030      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d52:	d017      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d58:	d811      	bhi.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d5e:	d013      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d64:	d80b      	bhi.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d010      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6e:	d106      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d70:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4a3a      	ldr	r2, [pc, #232]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004d7c:	e007      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	75fb      	strb	r3, [r7, #23]
      break;
 8004d82:	e004      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d84:	bf00      	nop
 8004d86:	e002      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d88:	bf00      	nop
 8004d8a:	e000      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d94:	4b32      	ldr	r3, [pc, #200]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004da0:	492f      	ldr	r1, [pc, #188]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	654b      	str	r3, [r1, #84]	; 0x54
 8004da6:	e001      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004db8:	4b29      	ldr	r3, [pc, #164]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc4:	4926      	ldr	r1, [pc, #152]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d008      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dd6:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004de2:	491f      	ldr	r1, [pc, #124]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00d      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004df4:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dfe:	6113      	str	r3, [r2, #16]
 8004e00:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e0a:	4915      	ldr	r1, [pc, #84]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	da08      	bge.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e18:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e24:	490e      	ldr	r1, [pc, #56]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d009      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e36:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e44:	4906      	ldr	r1, [pc, #24]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004e4a:	7dbb      	ldrb	r3, [r7, #22]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e000      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	58024400 	.word	0x58024400

08004e64 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b090      	sub	sp, #64	; 0x40
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e72:	f040 8089 	bne.w	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004e76:	4b95      	ldr	r3, [pc, #596]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d87d      	bhi.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004e86:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004ea1 	.word	0x08004ea1
 8004e90:	08004ec5 	.word	0x08004ec5
 8004e94:	08004ee9 	.word	0x08004ee9
 8004e98:	08004f7d 	.word	0x08004f7d
 8004e9c:	08004f0d 	.word	0x08004f0d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ea0:	4b8a      	ldr	r3, [pc, #552]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eac:	d107      	bne.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 feb8 	bl	8005c28 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ebc:	e3ed      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ec2:	e3ea      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ec4:	4b81      	ldr	r3, [pc, #516]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ed0:	d107      	bne.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ed2:	f107 0318 	add.w	r3, r7, #24
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fbfe 	bl	80056d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ee0:	e3db      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ee6:	e3d8      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ee8:	4b78      	ldr	r3, [pc, #480]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ef6:	f107 030c 	add.w	r3, r7, #12
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fd40 	bl	8005980 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f04:	e3c9      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f0a:	e3c6      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f0c:	4b6f      	ldr	r3, [pc, #444]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f14:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f16:	4b6d      	ldr	r3, [pc, #436]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d10c      	bne.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f28:	4b68      	ldr	r3, [pc, #416]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	08db      	lsrs	r3, r3, #3
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	4a67      	ldr	r2, [pc, #412]	; (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004f34:	fa22 f303 	lsr.w	r3, r2, r3
 8004f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f3a:	e01e      	b.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f3c:	4b63      	ldr	r3, [pc, #396]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f48:	d106      	bne.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f50:	d102      	bne.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004f52:	4b60      	ldr	r3, [pc, #384]	; (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f56:	e010      	b.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f58:	4b5c      	ldr	r3, [pc, #368]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f64:	d106      	bne.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f6c:	d102      	bne.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004f6e:	4b5a      	ldr	r3, [pc, #360]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f72:	e002      	b.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004f78:	e38f      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8004f7a:	e38e      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f7c:	4b57      	ldr	r3, [pc, #348]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f80:	e38b      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f86:	e388      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8e:	f040 80a7 	bne.w	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004f92:	4b4e      	ldr	r3, [pc, #312]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f96:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004f9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fa2:	d054      	beq.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004faa:	f200 808b 	bhi.w	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fb4:	f000 8083 	beq.w	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fbe:	f200 8081 	bhi.w	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fc8:	d02f      	beq.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd0:	d878      	bhi.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d004      	beq.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fde:	d012      	beq.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004fe0:	e070      	b.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fe2:	4b3a      	ldr	r3, [pc, #232]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fee:	d107      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fe17 	bl	8005c28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ffe:	e34c      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005004:	e349      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005006:	4b31      	ldr	r3, [pc, #196]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800500e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005012:	d107      	bne.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005014:	f107 0318 	add.w	r3, r7, #24
 8005018:	4618      	mov	r0, r3
 800501a:	f000 fb5d 	bl	80056d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005022:	e33a      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005028:	e337      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800502a:	4b28      	ldr	r3, [pc, #160]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005036:	d107      	bne.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005038:	f107 030c 	add.w	r3, r7, #12
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fc9f 	bl	8005980 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005046:	e328      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800504c:	e325      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800504e:	4b1f      	ldr	r3, [pc, #124]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005052:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005056:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005058:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d10c      	bne.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8005064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800506a:	4b18      	ldr	r3, [pc, #96]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	08db      	lsrs	r3, r3, #3
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	4a16      	ldr	r2, [pc, #88]	; (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8005076:	fa22 f303 	lsr.w	r3, r2, r3
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800507c:	e01e      	b.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800507e:	4b13      	ldr	r3, [pc, #76]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800508a:	d106      	bne.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005092:	d102      	bne.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005094:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005098:	e010      	b.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800509a:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a6:	d106      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ae:	d102      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b4:	e002      	b.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80050ba:	e2ee      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80050bc:	e2ed      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80050be:	4b07      	ldr	r3, [pc, #28]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80050c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050c2:	e2ea      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050c8:	e2e7      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80050ca:	bf00      	nop
 80050cc:	58024400 	.word	0x58024400
 80050d0:	03d09000 	.word	0x03d09000
 80050d4:	003d0900 	.word	0x003d0900
 80050d8:	017d7840 	.word	0x017d7840
 80050dc:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e6:	f040 809c 	bne.w	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80050ea:	4b9e      	ldr	r3, [pc, #632]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80050f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050fa:	d054      	beq.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005102:	f200 808b 	bhi.w	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800510c:	f000 8083 	beq.w	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005116:	f200 8081 	bhi.w	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005120:	d02f      	beq.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005128:	d878      	bhi.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	2b00      	cmp	r3, #0
 800512e:	d004      	beq.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005136:	d012      	beq.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005138:	e070      	b.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800513a:	4b8a      	ldr	r3, [pc, #552]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005146:	d107      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fd6b 	bl	8005c28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005156:	e2a0      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800515c:	e29d      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800515e:	4b81      	ldr	r3, [pc, #516]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800516a:	d107      	bne.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800516c:	f107 0318 	add.w	r3, r7, #24
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fab1 	bl	80056d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800517a:	e28e      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005180:	e28b      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005182:	4b78      	ldr	r3, [pc, #480]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800518a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800518e:	d107      	bne.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005190:	f107 030c 	add.w	r3, r7, #12
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fbf3 	bl	8005980 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800519e:	e27c      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051a4:	e279      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80051a6:	4b6f      	ldr	r3, [pc, #444]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051ae:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051b0:	4b6c      	ldr	r3, [pc, #432]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b04      	cmp	r3, #4
 80051ba:	d10c      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80051bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051c2:	4b68      	ldr	r3, [pc, #416]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	08db      	lsrs	r3, r3, #3
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	4a66      	ldr	r2, [pc, #408]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80051ce:	fa22 f303 	lsr.w	r3, r2, r3
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051d4:	e01e      	b.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051d6:	4b63      	ldr	r3, [pc, #396]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e2:	d106      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80051e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051ea:	d102      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80051ec:	4b5f      	ldr	r3, [pc, #380]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051f0:	e010      	b.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051f2:	4b5c      	ldr	r3, [pc, #368]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051fe:	d106      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005206:	d102      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005208:	4b59      	ldr	r3, [pc, #356]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800520a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800520c:	e002      	b.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005212:	e242      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005214:	e241      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005216:	4b57      	ldr	r3, [pc, #348]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005218:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800521a:	e23e      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005220:	e23b      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005228:	f040 80a6 	bne.w	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800522c:	4b4d      	ldr	r3, [pc, #308]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800522e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005230:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005234:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800523c:	d054      	beq.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005244:	f200 808b 	bhi.w	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800524e:	f000 8083 	beq.w	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005258:	f200 8081 	bhi.w	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005262:	d02f      	beq.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526a:	d878      	bhi.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005278:	d012      	beq.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800527a:	e070      	b.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800527c:	4b39      	ldr	r3, [pc, #228]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005284:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005288:	d107      	bne.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800528a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fcca 	bl	8005c28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005298:	e1ff      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800529e:	e1fc      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052a0:	4b30      	ldr	r3, [pc, #192]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052ac:	d107      	bne.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ae:	f107 0318 	add.w	r3, r7, #24
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fa10 	bl	80056d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052bc:	e1ed      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052c2:	e1ea      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052c4:	4b27      	ldr	r3, [pc, #156]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d0:	d107      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052d2:	f107 030c 	add.w	r3, r7, #12
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fb52 	bl	8005980 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052e0:	e1db      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052e6:	e1d8      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80052e8:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052f2:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d10c      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80052fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005304:	4b17      	ldr	r3, [pc, #92]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	08db      	lsrs	r3, r3, #3
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	4a16      	ldr	r2, [pc, #88]	; (8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
 8005314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005316:	e01e      	b.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005318:	4b12      	ldr	r3, [pc, #72]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005324:	d106      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005328:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800532c:	d102      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800532e:	4b0f      	ldr	r3, [pc, #60]	; (800536c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005332:	e010      	b.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005334:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005340:	d106      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005348:	d102      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800534a:	4b09      	ldr	r3, [pc, #36]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800534c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800534e:	e002      	b.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005354:	e1a1      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005356:	e1a0      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005358:	4b06      	ldr	r3, [pc, #24]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800535a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800535c:	e19d      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005362:	e19a      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005364:	58024400 	.word	0x58024400
 8005368:	03d09000 	.word	0x03d09000
 800536c:	003d0900 	.word	0x003d0900
 8005370:	017d7840 	.word	0x017d7840
 8005374:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800537e:	d173      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005380:	4b9a      	ldr	r3, [pc, #616]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005388:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005390:	d02f      	beq.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005398:	d863      	bhi.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	2b00      	cmp	r3, #0
 800539e:	d004      	beq.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a6:	d012      	beq.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80053a8:	e05b      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053aa:	4b90      	ldr	r3, [pc, #576]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b6:	d107      	bne.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053b8:	f107 0318 	add.w	r3, r7, #24
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 f98b 	bl	80056d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053c6:	e168      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053cc:	e165      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053ce:	4b87      	ldr	r3, [pc, #540]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053da:	d107      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053dc:	f107 030c 	add.w	r3, r7, #12
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 facd 	bl	8005980 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053ea:	e156      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053f0:	e153      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80053f2:	4b7e      	ldr	r3, [pc, #504]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053fc:	4b7b      	ldr	r3, [pc, #492]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b04      	cmp	r3, #4
 8005406:	d10c      	bne.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800540e:	4b77      	ldr	r3, [pc, #476]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	08db      	lsrs	r3, r3, #3
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	4a75      	ldr	r2, [pc, #468]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800541a:	fa22 f303 	lsr.w	r3, r2, r3
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005420:	e01e      	b.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005422:	4b72      	ldr	r3, [pc, #456]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542e:	d106      	bne.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8005430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005436:	d102      	bne.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005438:	4b6e      	ldr	r3, [pc, #440]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800543c:	e010      	b.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800543e:	4b6b      	ldr	r3, [pc, #428]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800544a:	d106      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800544c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005452:	d102      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005454:	4b68      	ldr	r3, [pc, #416]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005458:	e002      	b.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800545e:	e11c      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8005460:	e11b      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005466:	e118      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546e:	d133      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005470:	4b5e      	ldr	r3, [pc, #376]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005478:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005486:	d012      	beq.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8005488:	e023      	b.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800548a:	4b58      	ldr	r3, [pc, #352]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005496:	d107      	bne.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fbc3 	bl	8005c28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054a6:	e0f8      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ac:	e0f5      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054ae:	4b4f      	ldr	r3, [pc, #316]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ba:	d107      	bne.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054bc:	f107 0318 	add.w	r3, r7, #24
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 f909 	bl	80056d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054ca:	e0e6      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054d0:	e0e3      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054d6:	e0e0      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054de:	f040 808d 	bne.w	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80054e2:	4b42      	ldr	r3, [pc, #264]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80054e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80054ea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054f2:	d06b      	beq.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054fa:	d874      	bhi.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005502:	d056      	beq.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550a:	d86c      	bhi.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005512:	d03b      	beq.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800551a:	d864      	bhi.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005522:	d021      	beq.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800552a:	d85c      	bhi.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552e:	2b00      	cmp	r3, #0
 8005530:	d004      	beq.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005538:	d004      	beq.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800553a:	e054      	b.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800553c:	f000 f8b6 	bl	80056ac <HAL_RCCEx_GetD3PCLK1Freq>
 8005540:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005542:	e0aa      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005544:	4b29      	ldr	r3, [pc, #164]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800554c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005550:	d107      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005552:	f107 0318 	add.w	r3, r7, #24
 8005556:	4618      	mov	r0, r3
 8005558:	f000 f8be 	bl	80056d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005560:	e09b      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005566:	e098      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005568:	4b20      	ldr	r3, [pc, #128]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005574:	d107      	bne.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005576:	f107 030c 	add.w	r3, r7, #12
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fa00 	bl	8005980 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005584:	e089      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800558a:	e086      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800558c:	4b17      	ldr	r3, [pc, #92]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b04      	cmp	r3, #4
 8005596:	d109      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005598:	4b14      	ldr	r3, [pc, #80]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	08db      	lsrs	r3, r3, #3
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	4a13      	ldr	r2, [pc, #76]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80055a4:	fa22 f303 	lsr.w	r3, r2, r3
 80055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055aa:	e076      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055b0:	e073      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80055b2:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055be:	d102      	bne.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055c4:	e069      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ca:	e066      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055cc:	4b07      	ldr	r3, [pc, #28]	; (80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055d8:	d102      	bne.n	80055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80055da:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80055dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055de:	e05c      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055e4:	e059      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ea:	e056      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80055ec:	58024400 	.word	0x58024400
 80055f0:	03d09000 	.word	0x03d09000
 80055f4:	003d0900 	.word	0x003d0900
 80055f8:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005602:	d148      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005604:	4b27      	ldr	r3, [pc, #156]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800560c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005614:	d02a      	beq.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800561c:	d838      	bhi.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800562a:	d00d      	beq.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800562c:	e030      	b.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800562e:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800563a:	d102      	bne.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800563c:	4b1a      	ldr	r3, [pc, #104]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005640:	e02b      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005646:	e028      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005648:	4b16      	ldr	r3, [pc, #88]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005654:	d107      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fae4 	bl	8005c28 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005664:	e019      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800566a:	e016      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800566c:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005678:	d107      	bne.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800567a:	f107 0318 	add.w	r3, r7, #24
 800567e:	4618      	mov	r0, r3
 8005680:	f000 f82a 	bl	80056d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005688:	e007      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800568e:	e004      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005694:	e001      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800569a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800569c:	4618      	mov	r0, r3
 800569e:	3740      	adds	r7, #64	; 0x40
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	58024400 	.word	0x58024400
 80056a8:	017d7840 	.word	0x017d7840

080056ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80056b0:	f7fe fcae 	bl	8004010 <HAL_RCC_GetHCLKFreq>
 80056b4:	4602      	mov	r2, r0
 80056b6:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	091b      	lsrs	r3, r3, #4
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4904      	ldr	r1, [pc, #16]	; (80056d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80056c2:	5ccb      	ldrb	r3, [r1, r3]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	58024400 	.word	0x58024400
 80056d4:	08007b40 	.word	0x08007b40

080056d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80056d8:	b480      	push	{r7}
 80056da:	b089      	sub	sp, #36	; 0x24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056e0:	4ba1      	ldr	r3, [pc, #644]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	f003 0303 	and.w	r3, r3, #3
 80056e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80056ea:	4b9f      	ldr	r3, [pc, #636]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	0b1b      	lsrs	r3, r3, #12
 80056f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80056f6:	4b9c      	ldr	r3, [pc, #624]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005702:	4b99      	ldr	r3, [pc, #612]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005706:	08db      	lsrs	r3, r3, #3
 8005708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	fb02 f303 	mul.w	r3, r2, r3
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8111 	beq.w	8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b02      	cmp	r3, #2
 800572a:	f000 8083 	beq.w	8005834 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b02      	cmp	r3, #2
 8005732:	f200 80a1 	bhi.w	8005878 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d056      	beq.n	80057f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005742:	e099      	b.n	8005878 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005744:	4b88      	ldr	r3, [pc, #544]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d02d      	beq.n	80057ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005750:	4b85      	ldr	r3, [pc, #532]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	08db      	lsrs	r3, r3, #3
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	4a84      	ldr	r2, [pc, #528]	; (800596c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
 8005760:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577a:	4b7b      	ldr	r3, [pc, #492]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578a:	ed97 6a03 	vldr	s12, [r7, #12]
 800578e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800579e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057aa:	e087      	b.n	80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005974 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80057ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057be:	4b6a      	ldr	r3, [pc, #424]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ee:	e065      	b.n	80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005802:	4b59      	ldr	r3, [pc, #356]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005812:	ed97 6a03 	vldr	s12, [r7, #12]
 8005816:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800581a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800581e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005832:	e043      	b.n	80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800597c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005846:	4b48      	ldr	r3, [pc, #288]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005856:	ed97 6a03 	vldr	s12, [r7, #12]
 800585a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800585e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005872:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005876:	e021      	b.n	80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588a:	4b37      	ldr	r3, [pc, #220]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589a:	ed97 6a03 	vldr	s12, [r7, #12]
 800589e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80058bc:	4b2a      	ldr	r3, [pc, #168]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	0a5b      	lsrs	r3, r3, #9
 80058c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058e2:	ee17 2a90 	vmov	r2, s15
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80058ea:	4b1f      	ldr	r3, [pc, #124]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	0c1b      	lsrs	r3, r3, #16
 80058f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f4:	ee07 3a90 	vmov	s15, r3
 80058f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005904:	edd7 6a07 	vldr	s13, [r7, #28]
 8005908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800590c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005910:	ee17 2a90 	vmov	r2, s15
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005918:	4b13      	ldr	r3, [pc, #76]	; (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	0e1b      	lsrs	r3, r3, #24
 800591e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800592e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005932:	edd7 6a07 	vldr	s13, [r7, #28]
 8005936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593e:	ee17 2a90 	vmov	r2, s15
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005946:	e008      	b.n	800595a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	609a      	str	r2, [r3, #8]
}
 800595a:	bf00      	nop
 800595c:	3724      	adds	r7, #36	; 0x24
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	58024400 	.word	0x58024400
 800596c:	03d09000 	.word	0x03d09000
 8005970:	46000000 	.word	0x46000000
 8005974:	4c742400 	.word	0x4c742400
 8005978:	4a742400 	.word	0x4a742400
 800597c:	4bbebc20 	.word	0x4bbebc20

08005980 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005980:	b480      	push	{r7}
 8005982:	b089      	sub	sp, #36	; 0x24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005988:	4ba1      	ldr	r3, [pc, #644]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005992:	4b9f      	ldr	r3, [pc, #636]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	0d1b      	lsrs	r3, r3, #20
 8005998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800599c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800599e:	4b9c      	ldr	r3, [pc, #624]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	0a1b      	lsrs	r3, r3, #8
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80059aa:	4b99      	ldr	r3, [pc, #612]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ae:	08db      	lsrs	r3, r3, #3
 80059b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	fb02 f303 	mul.w	r3, r2, r3
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 8111 	beq.w	8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	f000 8083 	beq.w	8005adc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	f200 80a1 	bhi.w	8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d056      	beq.n	8005a98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80059ea:	e099      	b.n	8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059ec:	4b88      	ldr	r3, [pc, #544]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d02d      	beq.n	8005a54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059f8:	4b85      	ldr	r3, [pc, #532]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	08db      	lsrs	r3, r3, #3
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	4a84      	ldr	r2, [pc, #528]	; (8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
 8005a08:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	ee07 3a90 	vmov	s15, r3
 8005a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a22:	4b7b      	ldr	r3, [pc, #492]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a36:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a52:	e087      	b.n	8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a66:	4b6a      	ldr	r3, [pc, #424]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6e:	ee07 3a90 	vmov	s15, r3
 8005a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a96:	e065      	b.n	8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aaa:	4b59      	ldr	r3, [pc, #356]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005abe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ada:	e043      	b.n	8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aee:	4b48      	ldr	r3, [pc, #288]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af6:	ee07 3a90 	vmov	s15, r3
 8005afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b02:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b1e:	e021      	b.n	8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b32:	4b37      	ldr	r3, [pc, #220]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b46:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005b64:	4b2a      	ldr	r3, [pc, #168]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	0a5b      	lsrs	r3, r3, #9
 8005b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b8a:	ee17 2a90 	vmov	r2, s15
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005b92:	4b1f      	ldr	r3, [pc, #124]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	0c1b      	lsrs	r3, r3, #16
 8005b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9c:	ee07 3a90 	vmov	s15, r3
 8005ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ba8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb8:	ee17 2a90 	vmov	r2, s15
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005bc0:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	0e1b      	lsrs	r3, r3, #24
 8005bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005be6:	ee17 2a90 	vmov	r2, s15
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005bee:	e008      	b.n	8005c02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	609a      	str	r2, [r3, #8]
}
 8005c02:	bf00      	nop
 8005c04:	3724      	adds	r7, #36	; 0x24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	58024400 	.word	0x58024400
 8005c14:	03d09000 	.word	0x03d09000
 8005c18:	46000000 	.word	0x46000000
 8005c1c:	4c742400 	.word	0x4c742400
 8005c20:	4a742400 	.word	0x4a742400
 8005c24:	4bbebc20 	.word	0x4bbebc20

08005c28 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b089      	sub	sp, #36	; 0x24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c30:	4ba0      	ldr	r3, [pc, #640]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005c3a:	4b9e      	ldr	r3, [pc, #632]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	091b      	lsrs	r3, r3, #4
 8005c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c44:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005c46:	4b9b      	ldr	r3, [pc, #620]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005c50:	4b98      	ldr	r3, [pc, #608]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c54:	08db      	lsrs	r3, r3, #3
 8005c56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	fb02 f303 	mul.w	r3, r2, r3
 8005c60:	ee07 3a90 	vmov	s15, r3
 8005c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c68:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8111 	beq.w	8005e96 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	f000 8083 	beq.w	8005d82 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	f200 80a1 	bhi.w	8005dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d056      	beq.n	8005d3e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005c90:	e099      	b.n	8005dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c92:	4b88      	ldr	r3, [pc, #544]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d02d      	beq.n	8005cfa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c9e:	4b85      	ldr	r3, [pc, #532]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	08db      	lsrs	r3, r3, #3
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	4a83      	ldr	r2, [pc, #524]	; (8005eb8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005caa:	fa22 f303 	lsr.w	r3, r2, r3
 8005cae:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	ee07 3a90 	vmov	s15, r3
 8005cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc8:	4b7a      	ldr	r3, [pc, #488]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cdc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005cf8:	e087      	b.n	8005e0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	ee07 3a90 	vmov	s15, r3
 8005d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d04:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0c:	4b69      	ldr	r3, [pc, #420]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d14:	ee07 3a90 	vmov	s15, r3
 8005d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d20:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d3c:	e065      	b.n	8005e0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d48:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d50:	4b58      	ldr	r3, [pc, #352]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d60:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d64:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d80:	e043      	b.n	8005e0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	ee07 3a90 	vmov	s15, r3
 8005d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005d90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d94:	4b47      	ldr	r3, [pc, #284]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9c:	ee07 3a90 	vmov	s15, r3
 8005da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005dac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dc4:	e021      	b.n	8005e0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	ee07 3a90 	vmov	s15, r3
 8005dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd8:	4b36      	ldr	r3, [pc, #216]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dec:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005ebc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e08:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005e0a:	4b2a      	ldr	r3, [pc, #168]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	0a5b      	lsrs	r3, r3, #9
 8005e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e14:	ee07 3a90 	vmov	s15, r3
 8005e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e30:	ee17 2a90 	vmov	r2, s15
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005e38:	4b1e      	ldr	r3, [pc, #120]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	0c1b      	lsrs	r3, r3, #16
 8005e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e5e:	ee17 2a90 	vmov	r2, s15
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005e66:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	0e1b      	lsrs	r3, r3, #24
 8005e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e70:	ee07 3a90 	vmov	s15, r3
 8005e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e8c:	ee17 2a90 	vmov	r2, s15
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005e94:	e008      	b.n	8005ea8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	609a      	str	r2, [r3, #8]
}
 8005ea8:	bf00      	nop
 8005eaa:	3724      	adds	r7, #36	; 0x24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	58024400 	.word	0x58024400
 8005eb8:	03d09000 	.word	0x03d09000
 8005ebc:	46000000 	.word	0x46000000
 8005ec0:	4c742400 	.word	0x4c742400
 8005ec4:	4a742400 	.word	0x4a742400
 8005ec8:	4bbebc20 	.word	0x4bbebc20

08005ecc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005eda:	4b53      	ldr	r3, [pc, #332]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d101      	bne.n	8005eea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e099      	b.n	800601e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005eea:	4b4f      	ldr	r3, [pc, #316]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a4e      	ldr	r2, [pc, #312]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005ef0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ef6:	f7fa ff67 	bl	8000dc8 <HAL_GetTick>
 8005efa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005efc:	e008      	b.n	8005f10 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005efe:	f7fa ff63 	bl	8000dc8 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d901      	bls.n	8005f10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e086      	b.n	800601e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f10:	4b45      	ldr	r3, [pc, #276]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1f0      	bne.n	8005efe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f1c:	4b42      	ldr	r3, [pc, #264]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	031b      	lsls	r3, r3, #12
 8005f2a:	493f      	ldr	r1, [pc, #252]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	628b      	str	r3, [r1, #40]	; 0x28
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	025b      	lsls	r3, r3, #9
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	041b      	lsls	r3, r3, #16
 8005f4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	061b      	lsls	r3, r3, #24
 8005f5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f60:	4931      	ldr	r1, [pc, #196]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f66:	4b30      	ldr	r3, [pc, #192]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	492d      	ldr	r1, [pc, #180]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f78:	4b2b      	ldr	r3, [pc, #172]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	f023 0220 	bic.w	r2, r3, #32
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	4928      	ldr	r1, [pc, #160]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f8a:	4b27      	ldr	r3, [pc, #156]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	4a26      	ldr	r2, [pc, #152]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005f90:	f023 0310 	bic.w	r3, r3, #16
 8005f94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f96:	4b24      	ldr	r3, [pc, #144]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <RCCEx_PLL2_Config+0x160>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	69d2      	ldr	r2, [r2, #28]
 8005fa2:	00d2      	lsls	r2, r2, #3
 8005fa4:	4920      	ldr	r1, [pc, #128]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005faa:	4b1f      	ldr	r3, [pc, #124]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	4a1e      	ldr	r2, [pc, #120]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005fb0:	f043 0310 	orr.w	r3, r3, #16
 8005fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d106      	bne.n	8005fca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005fbc:	4b1a      	ldr	r3, [pc, #104]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	4a19      	ldr	r2, [pc, #100]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005fc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fc8:	e00f      	b.n	8005fea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d106      	bne.n	8005fde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005fd0:	4b15      	ldr	r3, [pc, #84]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	4a14      	ldr	r2, [pc, #80]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fdc:	e005      	b.n	8005fea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005fde:	4b12      	ldr	r3, [pc, #72]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	4a11      	ldr	r2, [pc, #68]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fe8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005fea:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a0e      	ldr	r2, [pc, #56]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8005ff0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff6:	f7fa fee7 	bl	8000dc8 <HAL_GetTick>
 8005ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ffc:	e008      	b.n	8006010 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ffe:	f7fa fee3 	bl	8000dc8 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e006      	b.n	800601e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006010:	4b05      	ldr	r3, [pc, #20]	; (8006028 <RCCEx_PLL2_Config+0x15c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0f0      	beq.n	8005ffe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800601c:	7bfb      	ldrb	r3, [r7, #15]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	58024400 	.word	0x58024400
 800602c:	ffff0007 	.word	0xffff0007

08006030 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800603e:	4b53      	ldr	r3, [pc, #332]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	f003 0303 	and.w	r3, r3, #3
 8006046:	2b03      	cmp	r3, #3
 8006048:	d101      	bne.n	800604e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e099      	b.n	8006182 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800604e:	4b4f      	ldr	r3, [pc, #316]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a4e      	ldr	r2, [pc, #312]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800605a:	f7fa feb5 	bl	8000dc8 <HAL_GetTick>
 800605e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006060:	e008      	b.n	8006074 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006062:	f7fa feb1 	bl	8000dc8 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e086      	b.n	8006182 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006074:	4b45      	ldr	r3, [pc, #276]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f0      	bne.n	8006062 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006080:	4b42      	ldr	r3, [pc, #264]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	051b      	lsls	r3, r3, #20
 800608e:	493f      	ldr	r1, [pc, #252]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006090:	4313      	orrs	r3, r2
 8006092:	628b      	str	r3, [r1, #40]	; 0x28
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	3b01      	subs	r3, #1
 800609a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	025b      	lsls	r3, r3, #9
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	041b      	lsls	r3, r3, #16
 80060b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	3b01      	subs	r3, #1
 80060be:	061b      	lsls	r3, r3, #24
 80060c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060c4:	4931      	ldr	r1, [pc, #196]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80060ca:	4b30      	ldr	r3, [pc, #192]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	492d      	ldr	r1, [pc, #180]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060dc:	4b2b      	ldr	r3, [pc, #172]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	4928      	ldr	r1, [pc, #160]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80060ee:	4b27      	ldr	r3, [pc, #156]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	4a26      	ldr	r2, [pc, #152]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 80060f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80060fa:	4b24      	ldr	r3, [pc, #144]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 80060fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060fe:	4b24      	ldr	r3, [pc, #144]	; (8006190 <RCCEx_PLL3_Config+0x160>)
 8006100:	4013      	ands	r3, r2
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	69d2      	ldr	r2, [r2, #28]
 8006106:	00d2      	lsls	r2, r2, #3
 8006108:	4920      	ldr	r1, [pc, #128]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 800610a:	4313      	orrs	r3, r2
 800610c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800610e:	4b1f      	ldr	r3, [pc, #124]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	4a1e      	ldr	r2, [pc, #120]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006118:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006120:	4b1a      	ldr	r3, [pc, #104]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	4a19      	ldr	r2, [pc, #100]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006126:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800612a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800612c:	e00f      	b.n	800614e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d106      	bne.n	8006142 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006134:	4b15      	ldr	r3, [pc, #84]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006138:	4a14      	ldr	r2, [pc, #80]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 800613a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800613e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006140:	e005      	b.n	800614e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006142:	4b12      	ldr	r3, [pc, #72]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	4a11      	ldr	r2, [pc, #68]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006148:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800614c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800614e:	4b0f      	ldr	r3, [pc, #60]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a0e      	ldr	r2, [pc, #56]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800615a:	f7fa fe35 	bl	8000dc8 <HAL_GetTick>
 800615e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006160:	e008      	b.n	8006174 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006162:	f7fa fe31 	bl	8000dc8 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d901      	bls.n	8006174 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e006      	b.n	8006182 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006174:	4b05      	ldr	r3, [pc, #20]	; (800618c <RCCEx_PLL3_Config+0x15c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0f0      	beq.n	8006162 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	58024400 	.word	0x58024400
 8006190:	ffff0007 	.word	0xffff0007

08006194 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e0f1      	b.n	800638a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a78      	ldr	r2, [pc, #480]	; (8006394 <HAL_SPI_Init+0x200>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00f      	beq.n	80061d6 <HAL_SPI_Init+0x42>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a77      	ldr	r2, [pc, #476]	; (8006398 <HAL_SPI_Init+0x204>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00a      	beq.n	80061d6 <HAL_SPI_Init+0x42>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a75      	ldr	r2, [pc, #468]	; (800639c <HAL_SPI_Init+0x208>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d005      	beq.n	80061d6 <HAL_SPI_Init+0x42>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	2b0f      	cmp	r3, #15
 80061d0:	d901      	bls.n	80061d6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e0d9      	b.n	800638a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fba2 	bl	8006920 <SPI_GetPacketSize>
 80061dc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a6c      	ldr	r2, [pc, #432]	; (8006394 <HAL_SPI_Init+0x200>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00c      	beq.n	8006202 <HAL_SPI_Init+0x6e>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a6a      	ldr	r2, [pc, #424]	; (8006398 <HAL_SPI_Init+0x204>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <HAL_SPI_Init+0x6e>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a69      	ldr	r2, [pc, #420]	; (800639c <HAL_SPI_Init+0x208>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d002      	beq.n	8006202 <HAL_SPI_Init+0x6e>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d811      	bhi.n	8006226 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006206:	4a63      	ldr	r2, [pc, #396]	; (8006394 <HAL_SPI_Init+0x200>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d009      	beq.n	8006220 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a61      	ldr	r2, [pc, #388]	; (8006398 <HAL_SPI_Init+0x204>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d004      	beq.n	8006220 <HAL_SPI_Init+0x8c>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a60      	ldr	r2, [pc, #384]	; (800639c <HAL_SPI_Init+0x208>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d104      	bne.n	800622a <HAL_SPI_Init+0x96>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b10      	cmp	r3, #16
 8006224:	d901      	bls.n	800622a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e0af      	b.n	800638a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fa fb8e 	bl	8000960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0201 	bic.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006266:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006270:	d119      	bne.n	80062a6 <HAL_SPI_Init+0x112>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800627a:	d103      	bne.n	8006284 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006280:	2b00      	cmp	r3, #0
 8006282:	d008      	beq.n	8006296 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10c      	bne.n	80062a6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006294:	d107      	bne.n	80062a6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69da      	ldr	r2, [r3, #28]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	431a      	orrs	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b8:	ea42 0103 	orr.w	r1, r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006306:	ea42 0103 	orr.w	r1, r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d113      	bne.n	8006346 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006330:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006344:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0201 	bic.w	r2, r2, #1
 8006354:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	40013000 	.word	0x40013000
 8006398:	40003800 	.word	0x40003800
 800639c:	40003c00 	.word	0x40003c00

080063a0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08a      	sub	sp, #40	; 0x28
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	4613      	mov	r3, r2
 80063ae:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3320      	adds	r3, #32
 80063b6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_SPI_Transmit+0x2a>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e1d7      	b.n	800677a <HAL_SPI_Transmit+0x3da>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063d2:	f7fa fcf9 	bl	8000dc8 <HAL_GetTick>
 80063d6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d007      	beq.n	80063f4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
 80063e6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80063f0:	7efb      	ldrb	r3, [r7, #27]
 80063f2:	e1c2      	b.n	800677a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_SPI_Transmit+0x60>
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d107      	bne.n	8006410 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800640c:	7efb      	ldrb	r3, [r7, #27]
 800640e:	e1b4      	b.n	800677a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2203      	movs	r2, #3
 8006414:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	88fa      	ldrh	r2, [r7, #6]
 8006432:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006460:	d107      	bne.n	8006472 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006470:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	4b96      	ldr	r3, [pc, #600]	; (80066d4 <HAL_SPI_Transmit+0x334>)
 800647a:	4013      	ands	r3, r2
 800647c:	88f9      	ldrh	r1, [r7, #6]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	430b      	orrs	r3, r1
 8006484:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0201 	orr.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800649e:	d107      	bne.n	80064b0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	2b0f      	cmp	r3, #15
 80064b6:	d947      	bls.n	8006548 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80064b8:	e03f      	b.n	800653a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d114      	bne.n	80064f2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6812      	ldr	r2, [r2, #0]
 80064d2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d8:	1d1a      	adds	r2, r3, #4
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80064f0:	e023      	b.n	800653a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f2:	f7fa fc69 	bl	8000dc8 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d803      	bhi.n	800650a <HAL_SPI_Transmit+0x16a>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006508:	d102      	bne.n	8006510 <HAL_SPI_Transmit+0x170>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d114      	bne.n	800653a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f937 	bl	8006784 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006524:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e11f      	b.n	800677a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1b9      	bne.n	80064ba <HAL_SPI_Transmit+0x11a>
 8006546:	e0f2      	b.n	800672e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	2b07      	cmp	r3, #7
 800654e:	f240 80e7 	bls.w	8006720 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006552:	e05d      	b.n	8006610 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b02      	cmp	r3, #2
 8006560:	d132      	bne.n	80065c8 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b01      	cmp	r3, #1
 800656c:	d918      	bls.n	80065a0 <HAL_SPI_Transmit+0x200>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d014      	beq.n	80065a0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006586:	1d1a      	adds	r2, r3, #4
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b02      	subs	r3, #2
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800659e:	e037      	b.n	8006610 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a4:	881a      	ldrh	r2, [r3, #0]
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ae:	1c9a      	adds	r2, r3, #2
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80065c6:	e023      	b.n	8006610 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065c8:	f7fa fbfe 	bl	8000dc8 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d803      	bhi.n	80065e0 <HAL_SPI_Transmit+0x240>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065de:	d102      	bne.n	80065e6 <HAL_SPI_Transmit+0x246>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d114      	bne.n	8006610 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f8cc 	bl	8006784 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e0b4      	b.n	800677a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006616:	b29b      	uxth	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d19b      	bne.n	8006554 <HAL_SPI_Transmit+0x1b4>
 800661c:	e087      	b.n	800672e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b02      	cmp	r3, #2
 800662a:	d155      	bne.n	80066d8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006632:	b29b      	uxth	r3, r3
 8006634:	2b03      	cmp	r3, #3
 8006636:	d918      	bls.n	800666a <HAL_SPI_Transmit+0x2ca>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663c:	2b40      	cmp	r3, #64	; 0x40
 800663e:	d914      	bls.n	800666a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006650:	1d1a      	adds	r2, r3, #4
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b04      	subs	r3, #4
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006668:	e05a      	b.n	8006720 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b01      	cmp	r3, #1
 8006674:	d917      	bls.n	80066a6 <HAL_SPI_Transmit+0x306>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d013      	beq.n	80066a6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006682:	881a      	ldrh	r2, [r3, #0]
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668c:	1c9a      	adds	r2, r3, #2
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b02      	subs	r3, #2
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80066a4:	e03c      	b.n	8006720 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3320      	adds	r3, #32
 80066b0:	7812      	ldrb	r2, [r2, #0]
 80066b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80066d0:	e026      	b.n	8006720 <HAL_SPI_Transmit+0x380>
 80066d2:	bf00      	nop
 80066d4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066d8:	f7fa fb76 	bl	8000dc8 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d803      	bhi.n	80066f0 <HAL_SPI_Transmit+0x350>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ee:	d102      	bne.n	80066f6 <HAL_SPI_Transmit+0x356>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d114      	bne.n	8006720 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f844 	bl	8006784 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800670a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e02c      	b.n	800677a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	f47f af78 	bne.w	800661e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2200      	movs	r2, #0
 8006736:	2108      	movs	r1, #8
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f8c3 	bl	80068c4 <SPI_WaitOnFlagUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800674a:	f043 0220 	orr.w	r2, r3, #32
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f815 	bl	8006784 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006778:	7efb      	ldrb	r3, [r7, #27]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop

08006784 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0208 	orr.w	r2, r2, #8
 80067a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0210 	orr.w	r2, r2, #16
 80067b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0201 	bic.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6919      	ldr	r1, [r3, #16]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4b3c      	ldr	r3, [pc, #240]	; (80068c0 <SPI_CloseTransfer+0x13c>)
 80067d0:	400b      	ands	r3, r1
 80067d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80067e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d014      	beq.n	800681a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00f      	beq.n	800681a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006800:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0220 	orr.w	r2, r2, #32
 8006818:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b03      	cmp	r3, #3
 8006824:	d014      	beq.n	8006850 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00f      	beq.n	8006850 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006836:	f043 0204 	orr.w	r2, r3, #4
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800684e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00f      	beq.n	800687a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006860:	f043 0201 	orr.w	r2, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699a      	ldr	r2, [r3, #24]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006878:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00f      	beq.n	80068a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800688a:	f043 0208 	orr.w	r2, r3, #8
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80068b4:	bf00      	nop
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	fffffc90 	.word	0xfffffc90

080068c4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80068d4:	e010      	b.n	80068f8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068d6:	f7fa fa77 	bl	8000dc8 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d803      	bhi.n	80068ee <SPI_WaitOnFlagUntilTimeout+0x2a>
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ec:	d102      	bne.n	80068f4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e00f      	b.n	8006918 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695a      	ldr	r2, [r3, #20]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	4013      	ands	r3, r2
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	429a      	cmp	r2, r3
 8006906:	bf0c      	ite	eq
 8006908:	2301      	moveq	r3, #1
 800690a:	2300      	movne	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	461a      	mov	r2, r3
 8006910:	79fb      	ldrb	r3, [r7, #7]
 8006912:	429a      	cmp	r2, r3
 8006914:	d0df      	beq.n	80068d6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	3301      	adds	r3, #1
 8006930:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	3307      	adds	r3, #7
 800693e:	08db      	lsrs	r3, r3, #3
 8006940:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	fb02 f303 	mul.w	r3, r2, r3
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e049      	b.n	80069fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d106      	bne.n	8006982 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7fa f879 	bl	8000a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2202      	movs	r2, #2
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3304      	adds	r3, #4
 8006992:	4619      	mov	r1, r3
 8006994:	4610      	mov	r0, r2
 8006996:	f000 fbbf 	bl	8007118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e049      	b.n	8006aaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d106      	bne.n	8006a30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f841 	bl	8006ab2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4619      	mov	r1, r3
 8006a42:	4610      	mov	r0, r2
 8006a44:	f000 fb68 	bl	8007118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
	...

08006ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d109      	bne.n	8006aec <HAL_TIM_PWM_Start+0x24>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	bf14      	ite	ne
 8006ae4:	2301      	movne	r3, #1
 8006ae6:	2300      	moveq	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	e03c      	b.n	8006b66 <HAL_TIM_PWM_Start+0x9e>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d109      	bne.n	8006b06 <HAL_TIM_PWM_Start+0x3e>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	bf14      	ite	ne
 8006afe:	2301      	movne	r3, #1
 8006b00:	2300      	moveq	r3, #0
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	e02f      	b.n	8006b66 <HAL_TIM_PWM_Start+0x9e>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d109      	bne.n	8006b20 <HAL_TIM_PWM_Start+0x58>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	bf14      	ite	ne
 8006b18:	2301      	movne	r3, #1
 8006b1a:	2300      	moveq	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	e022      	b.n	8006b66 <HAL_TIM_PWM_Start+0x9e>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b0c      	cmp	r3, #12
 8006b24:	d109      	bne.n	8006b3a <HAL_TIM_PWM_Start+0x72>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	bf14      	ite	ne
 8006b32:	2301      	movne	r3, #1
 8006b34:	2300      	moveq	r3, #0
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	e015      	b.n	8006b66 <HAL_TIM_PWM_Start+0x9e>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d109      	bne.n	8006b54 <HAL_TIM_PWM_Start+0x8c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	bf14      	ite	ne
 8006b4c:	2301      	movne	r3, #1
 8006b4e:	2300      	moveq	r3, #0
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	e008      	b.n	8006b66 <HAL_TIM_PWM_Start+0x9e>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	bf14      	ite	ne
 8006b60:	2301      	movne	r3, #1
 8006b62:	2300      	moveq	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e0ab      	b.n	8006cc6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <HAL_TIM_PWM_Start+0xb6>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b7c:	e023      	b.n	8006bc6 <HAL_TIM_PWM_Start+0xfe>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d104      	bne.n	8006b8e <HAL_TIM_PWM_Start+0xc6>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b8c:	e01b      	b.n	8006bc6 <HAL_TIM_PWM_Start+0xfe>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d104      	bne.n	8006b9e <HAL_TIM_PWM_Start+0xd6>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b9c:	e013      	b.n	8006bc6 <HAL_TIM_PWM_Start+0xfe>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b0c      	cmp	r3, #12
 8006ba2:	d104      	bne.n	8006bae <HAL_TIM_PWM_Start+0xe6>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bac:	e00b      	b.n	8006bc6 <HAL_TIM_PWM_Start+0xfe>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b10      	cmp	r3, #16
 8006bb2:	d104      	bne.n	8006bbe <HAL_TIM_PWM_Start+0xf6>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bbc:	e003      	b.n	8006bc6 <HAL_TIM_PWM_Start+0xfe>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 febc 	bl	800794c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a3d      	ldr	r2, [pc, #244]	; (8006cd0 <HAL_TIM_PWM_Start+0x208>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x13e>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a3c      	ldr	r2, [pc, #240]	; (8006cd4 <HAL_TIM_PWM_Start+0x20c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00e      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x13e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a3a      	ldr	r2, [pc, #232]	; (8006cd8 <HAL_TIM_PWM_Start+0x210>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x13e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a39      	ldr	r2, [pc, #228]	; (8006cdc <HAL_TIM_PWM_Start+0x214>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x13e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a37      	ldr	r2, [pc, #220]	; (8006ce0 <HAL_TIM_PWM_Start+0x218>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d101      	bne.n	8006c0a <HAL_TIM_PWM_Start+0x142>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <HAL_TIM_PWM_Start+0x144>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d007      	beq.n	8006c20 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a2a      	ldr	r2, [pc, #168]	; (8006cd0 <HAL_TIM_PWM_Start+0x208>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d02c      	beq.n	8006c84 <HAL_TIM_PWM_Start+0x1bc>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c32:	d027      	beq.n	8006c84 <HAL_TIM_PWM_Start+0x1bc>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a2a      	ldr	r2, [pc, #168]	; (8006ce4 <HAL_TIM_PWM_Start+0x21c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d022      	beq.n	8006c84 <HAL_TIM_PWM_Start+0x1bc>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a29      	ldr	r2, [pc, #164]	; (8006ce8 <HAL_TIM_PWM_Start+0x220>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d01d      	beq.n	8006c84 <HAL_TIM_PWM_Start+0x1bc>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a27      	ldr	r2, [pc, #156]	; (8006cec <HAL_TIM_PWM_Start+0x224>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d018      	beq.n	8006c84 <HAL_TIM_PWM_Start+0x1bc>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a1f      	ldr	r2, [pc, #124]	; (8006cd4 <HAL_TIM_PWM_Start+0x20c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d013      	beq.n	8006c84 <HAL_TIM_PWM_Start+0x1bc>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a23      	ldr	r2, [pc, #140]	; (8006cf0 <HAL_TIM_PWM_Start+0x228>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00e      	beq.n	8006c84 <HAL_TIM_PWM_Start+0x1bc>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a1b      	ldr	r2, [pc, #108]	; (8006cd8 <HAL_TIM_PWM_Start+0x210>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d009      	beq.n	8006c84 <HAL_TIM_PWM_Start+0x1bc>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1f      	ldr	r2, [pc, #124]	; (8006cf4 <HAL_TIM_PWM_Start+0x22c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d004      	beq.n	8006c84 <HAL_TIM_PWM_Start+0x1bc>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a1e      	ldr	r2, [pc, #120]	; (8006cf8 <HAL_TIM_PWM_Start+0x230>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d115      	bne.n	8006cb0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689a      	ldr	r2, [r3, #8]
 8006c8a:	4b1c      	ldr	r3, [pc, #112]	; (8006cfc <HAL_TIM_PWM_Start+0x234>)
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b06      	cmp	r3, #6
 8006c94:	d015      	beq.n	8006cc2 <HAL_TIM_PWM_Start+0x1fa>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c9c:	d011      	beq.n	8006cc2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0201 	orr.w	r2, r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cae:	e008      	b.n	8006cc2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	e000      	b.n	8006cc4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40010000 	.word	0x40010000
 8006cd4:	40010400 	.word	0x40010400
 8006cd8:	40014000 	.word	0x40014000
 8006cdc:	40014400 	.word	0x40014400
 8006ce0:	40014800 	.word	0x40014800
 8006ce4:	40000400 	.word	0x40000400
 8006ce8:	40000800 	.word	0x40000800
 8006cec:	40000c00 	.word	0x40000c00
 8006cf0:	40001800 	.word	0x40001800
 8006cf4:	4000e000 	.word	0x4000e000
 8006cf8:	4000e400 	.word	0x4000e400
 8006cfc:	00010007 	.word	0x00010007

08006d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e0ff      	b.n	8006f1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b14      	cmp	r3, #20
 8006d2a:	f200 80f0 	bhi.w	8006f0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d2e:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006d89 	.word	0x08006d89
 8006d38:	08006f0f 	.word	0x08006f0f
 8006d3c:	08006f0f 	.word	0x08006f0f
 8006d40:	08006f0f 	.word	0x08006f0f
 8006d44:	08006dc9 	.word	0x08006dc9
 8006d48:	08006f0f 	.word	0x08006f0f
 8006d4c:	08006f0f 	.word	0x08006f0f
 8006d50:	08006f0f 	.word	0x08006f0f
 8006d54:	08006e0b 	.word	0x08006e0b
 8006d58:	08006f0f 	.word	0x08006f0f
 8006d5c:	08006f0f 	.word	0x08006f0f
 8006d60:	08006f0f 	.word	0x08006f0f
 8006d64:	08006e4b 	.word	0x08006e4b
 8006d68:	08006f0f 	.word	0x08006f0f
 8006d6c:	08006f0f 	.word	0x08006f0f
 8006d70:	08006f0f 	.word	0x08006f0f
 8006d74:	08006e8d 	.word	0x08006e8d
 8006d78:	08006f0f 	.word	0x08006f0f
 8006d7c:	08006f0f 	.word	0x08006f0f
 8006d80:	08006f0f 	.word	0x08006f0f
 8006d84:	08006ecd 	.word	0x08006ecd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fa68 	bl	8007264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0208 	orr.w	r2, r2, #8
 8006da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699a      	ldr	r2, [r3, #24]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0204 	bic.w	r2, r2, #4
 8006db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6999      	ldr	r1, [r3, #24]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	619a      	str	r2, [r3, #24]
      break;
 8006dc6:	e0a5      	b.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fad8 	bl	8007384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699a      	ldr	r2, [r3, #24]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6999      	ldr	r1, [r3, #24]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	021a      	lsls	r2, r3, #8
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	619a      	str	r2, [r3, #24]
      break;
 8006e08:	e084      	b.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fb41 	bl	8007498 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69da      	ldr	r2, [r3, #28]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0208 	orr.w	r2, r2, #8
 8006e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69da      	ldr	r2, [r3, #28]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0204 	bic.w	r2, r2, #4
 8006e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69d9      	ldr	r1, [r3, #28]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	61da      	str	r2, [r3, #28]
      break;
 8006e48:	e064      	b.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fba9 	bl	80075a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69da      	ldr	r2, [r3, #28]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69d9      	ldr	r1, [r3, #28]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	021a      	lsls	r2, r3, #8
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	61da      	str	r2, [r3, #28]
      break;
 8006e8a:	e043      	b.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fbf2 	bl	800767c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0208 	orr.w	r2, r2, #8
 8006ea6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f022 0204 	bic.w	r2, r2, #4
 8006eb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006eca:	e023      	b.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fc36 	bl	8007744 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ee6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ef6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	021a      	lsls	r2, r3, #8
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f0c:	e002      	b.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	75fb      	strb	r3, [r7, #23]
      break;
 8006f12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop

08006f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_TIM_ConfigClockSource+0x1c>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e0dc      	b.n	80070fe <HAL_TIM_ConfigClockSource+0x1d6>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	4b6a      	ldr	r3, [pc, #424]	; (8007108 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a64      	ldr	r2, [pc, #400]	; (800710c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	f000 80a9 	beq.w	80070d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f80:	4a62      	ldr	r2, [pc, #392]	; (800710c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	f200 80ae 	bhi.w	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f88:	4a61      	ldr	r2, [pc, #388]	; (8007110 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	f000 80a1 	beq.w	80070d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006f90:	4a5f      	ldr	r2, [pc, #380]	; (8007110 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	f200 80a6 	bhi.w	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f98:	4a5e      	ldr	r2, [pc, #376]	; (8007114 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	f000 8099 	beq.w	80070d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006fa0:	4a5c      	ldr	r2, [pc, #368]	; (8007114 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	f200 809e 	bhi.w	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fa8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006fac:	f000 8091 	beq.w	80070d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006fb0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006fb4:	f200 8096 	bhi.w	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fbc:	f000 8089 	beq.w	80070d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fc4:	f200 808e 	bhi.w	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fcc:	d03e      	beq.n	800704c <HAL_TIM_ConfigClockSource+0x124>
 8006fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fd2:	f200 8087 	bhi.w	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fda:	f000 8086 	beq.w	80070ea <HAL_TIM_ConfigClockSource+0x1c2>
 8006fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe2:	d87f      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fe4:	2b70      	cmp	r3, #112	; 0x70
 8006fe6:	d01a      	beq.n	800701e <HAL_TIM_ConfigClockSource+0xf6>
 8006fe8:	2b70      	cmp	r3, #112	; 0x70
 8006fea:	d87b      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fec:	2b60      	cmp	r3, #96	; 0x60
 8006fee:	d050      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0x16a>
 8006ff0:	2b60      	cmp	r3, #96	; 0x60
 8006ff2:	d877      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ff4:	2b50      	cmp	r3, #80	; 0x50
 8006ff6:	d03c      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0x14a>
 8006ff8:	2b50      	cmp	r3, #80	; 0x50
 8006ffa:	d873      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ffc:	2b40      	cmp	r3, #64	; 0x40
 8006ffe:	d058      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x18a>
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	d86f      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007004:	2b30      	cmp	r3, #48	; 0x30
 8007006:	d064      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007008:	2b30      	cmp	r3, #48	; 0x30
 800700a:	d86b      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800700c:	2b20      	cmp	r3, #32
 800700e:	d060      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007010:	2b20      	cmp	r3, #32
 8007012:	d867      	bhi.n	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d05c      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8007018:	2b10      	cmp	r3, #16
 800701a:	d05a      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800701c:	e062      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6899      	ldr	r1, [r3, #8]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f000 fc6d 	bl	800790c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007040:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	609a      	str	r2, [r3, #8]
      break;
 800704a:	e04f      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	6899      	ldr	r1, [r3, #8]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f000 fc56 	bl	800790c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800706e:	609a      	str	r2, [r3, #8]
      break;
 8007070:	e03c      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6818      	ldr	r0, [r3, #0]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	6859      	ldr	r1, [r3, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	461a      	mov	r2, r3
 8007080:	f000 fbc6 	bl	8007810 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2150      	movs	r1, #80	; 0x50
 800708a:	4618      	mov	r0, r3
 800708c:	f000 fc20 	bl	80078d0 <TIM_ITRx_SetConfig>
      break;
 8007090:	e02c      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6859      	ldr	r1, [r3, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	461a      	mov	r2, r3
 80070a0:	f000 fbe5 	bl	800786e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2160      	movs	r1, #96	; 0x60
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fc10 	bl	80078d0 <TIM_ITRx_SetConfig>
      break;
 80070b0:	e01c      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6818      	ldr	r0, [r3, #0]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	6859      	ldr	r1, [r3, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	461a      	mov	r2, r3
 80070c0:	f000 fba6 	bl	8007810 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2140      	movs	r1, #64	; 0x40
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fc00 	bl	80078d0 <TIM_ITRx_SetConfig>
      break;
 80070d0:	e00c      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4619      	mov	r1, r3
 80070dc:	4610      	mov	r0, r2
 80070de:	f000 fbf7 	bl	80078d0 <TIM_ITRx_SetConfig>
      break;
 80070e2:	e003      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
      break;
 80070e8:	e000      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80070ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	ffceff88 	.word	0xffceff88
 800710c:	00100040 	.word	0x00100040
 8007110:	00100030 	.word	0x00100030
 8007114:	00100020 	.word	0x00100020

08007118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a44      	ldr	r2, [pc, #272]	; (800723c <TIM_Base_SetConfig+0x124>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d013      	beq.n	8007158 <TIM_Base_SetConfig+0x40>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007136:	d00f      	beq.n	8007158 <TIM_Base_SetConfig+0x40>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a41      	ldr	r2, [pc, #260]	; (8007240 <TIM_Base_SetConfig+0x128>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00b      	beq.n	8007158 <TIM_Base_SetConfig+0x40>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a40      	ldr	r2, [pc, #256]	; (8007244 <TIM_Base_SetConfig+0x12c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d007      	beq.n	8007158 <TIM_Base_SetConfig+0x40>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a3f      	ldr	r2, [pc, #252]	; (8007248 <TIM_Base_SetConfig+0x130>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d003      	beq.n	8007158 <TIM_Base_SetConfig+0x40>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a3e      	ldr	r2, [pc, #248]	; (800724c <TIM_Base_SetConfig+0x134>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d108      	bne.n	800716a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800715e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a33      	ldr	r2, [pc, #204]	; (800723c <TIM_Base_SetConfig+0x124>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d027      	beq.n	80071c2 <TIM_Base_SetConfig+0xaa>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007178:	d023      	beq.n	80071c2 <TIM_Base_SetConfig+0xaa>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a30      	ldr	r2, [pc, #192]	; (8007240 <TIM_Base_SetConfig+0x128>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d01f      	beq.n	80071c2 <TIM_Base_SetConfig+0xaa>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a2f      	ldr	r2, [pc, #188]	; (8007244 <TIM_Base_SetConfig+0x12c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d01b      	beq.n	80071c2 <TIM_Base_SetConfig+0xaa>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a2e      	ldr	r2, [pc, #184]	; (8007248 <TIM_Base_SetConfig+0x130>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d017      	beq.n	80071c2 <TIM_Base_SetConfig+0xaa>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a2d      	ldr	r2, [pc, #180]	; (800724c <TIM_Base_SetConfig+0x134>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d013      	beq.n	80071c2 <TIM_Base_SetConfig+0xaa>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a2c      	ldr	r2, [pc, #176]	; (8007250 <TIM_Base_SetConfig+0x138>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00f      	beq.n	80071c2 <TIM_Base_SetConfig+0xaa>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a2b      	ldr	r2, [pc, #172]	; (8007254 <TIM_Base_SetConfig+0x13c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d00b      	beq.n	80071c2 <TIM_Base_SetConfig+0xaa>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a2a      	ldr	r2, [pc, #168]	; (8007258 <TIM_Base_SetConfig+0x140>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d007      	beq.n	80071c2 <TIM_Base_SetConfig+0xaa>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a29      	ldr	r2, [pc, #164]	; (800725c <TIM_Base_SetConfig+0x144>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d003      	beq.n	80071c2 <TIM_Base_SetConfig+0xaa>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a28      	ldr	r2, [pc, #160]	; (8007260 <TIM_Base_SetConfig+0x148>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d108      	bne.n	80071d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a10      	ldr	r2, [pc, #64]	; (800723c <TIM_Base_SetConfig+0x124>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00f      	beq.n	8007220 <TIM_Base_SetConfig+0x108>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a12      	ldr	r2, [pc, #72]	; (800724c <TIM_Base_SetConfig+0x134>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d00b      	beq.n	8007220 <TIM_Base_SetConfig+0x108>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a11      	ldr	r2, [pc, #68]	; (8007250 <TIM_Base_SetConfig+0x138>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d007      	beq.n	8007220 <TIM_Base_SetConfig+0x108>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a10      	ldr	r2, [pc, #64]	; (8007254 <TIM_Base_SetConfig+0x13c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d003      	beq.n	8007220 <TIM_Base_SetConfig+0x108>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a0f      	ldr	r2, [pc, #60]	; (8007258 <TIM_Base_SetConfig+0x140>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d103      	bne.n	8007228 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	615a      	str	r2, [r3, #20]
}
 800722e:	bf00      	nop
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	40010000 	.word	0x40010000
 8007240:	40000400 	.word	0x40000400
 8007244:	40000800 	.word	0x40000800
 8007248:	40000c00 	.word	0x40000c00
 800724c:	40010400 	.word	0x40010400
 8007250:	40014000 	.word	0x40014000
 8007254:	40014400 	.word	0x40014400
 8007258:	40014800 	.word	0x40014800
 800725c:	4000e000 	.word	0x4000e000
 8007260:	4000e400 	.word	0x4000e400

08007264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f023 0201 	bic.w	r2, r3, #1
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	4b37      	ldr	r3, [pc, #220]	; (800736c <TIM_OC1_SetConfig+0x108>)
 8007290:	4013      	ands	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0303 	bic.w	r3, r3, #3
 800729a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f023 0302 	bic.w	r3, r3, #2
 80072ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a2d      	ldr	r2, [pc, #180]	; (8007370 <TIM_OC1_SetConfig+0x10c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00f      	beq.n	80072e0 <TIM_OC1_SetConfig+0x7c>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a2c      	ldr	r2, [pc, #176]	; (8007374 <TIM_OC1_SetConfig+0x110>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00b      	beq.n	80072e0 <TIM_OC1_SetConfig+0x7c>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a2b      	ldr	r2, [pc, #172]	; (8007378 <TIM_OC1_SetConfig+0x114>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_OC1_SetConfig+0x7c>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a2a      	ldr	r2, [pc, #168]	; (800737c <TIM_OC1_SetConfig+0x118>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC1_SetConfig+0x7c>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a29      	ldr	r2, [pc, #164]	; (8007380 <TIM_OC1_SetConfig+0x11c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d10c      	bne.n	80072fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 0308 	bic.w	r3, r3, #8
 80072e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f023 0304 	bic.w	r3, r3, #4
 80072f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a1c      	ldr	r2, [pc, #112]	; (8007370 <TIM_OC1_SetConfig+0x10c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d00f      	beq.n	8007322 <TIM_OC1_SetConfig+0xbe>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a1b      	ldr	r2, [pc, #108]	; (8007374 <TIM_OC1_SetConfig+0x110>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d00b      	beq.n	8007322 <TIM_OC1_SetConfig+0xbe>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a1a      	ldr	r2, [pc, #104]	; (8007378 <TIM_OC1_SetConfig+0x114>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d007      	beq.n	8007322 <TIM_OC1_SetConfig+0xbe>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a19      	ldr	r2, [pc, #100]	; (800737c <TIM_OC1_SetConfig+0x118>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d003      	beq.n	8007322 <TIM_OC1_SetConfig+0xbe>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a18      	ldr	r2, [pc, #96]	; (8007380 <TIM_OC1_SetConfig+0x11c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d111      	bne.n	8007346 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	4313      	orrs	r3, r2
 8007344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	621a      	str	r2, [r3, #32]
}
 8007360:	bf00      	nop
 8007362:	371c      	adds	r7, #28
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	fffeff8f 	.word	0xfffeff8f
 8007370:	40010000 	.word	0x40010000
 8007374:	40010400 	.word	0x40010400
 8007378:	40014000 	.word	0x40014000
 800737c:	40014400 	.word	0x40014400
 8007380:	40014800 	.word	0x40014800

08007384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f023 0210 	bic.w	r2, r3, #16
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4b34      	ldr	r3, [pc, #208]	; (8007480 <TIM_OC2_SetConfig+0xfc>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f023 0320 	bic.w	r3, r3, #32
 80073ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a29      	ldr	r2, [pc, #164]	; (8007484 <TIM_OC2_SetConfig+0x100>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d003      	beq.n	80073ec <TIM_OC2_SetConfig+0x68>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a28      	ldr	r2, [pc, #160]	; (8007488 <TIM_OC2_SetConfig+0x104>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d10d      	bne.n	8007408 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	011b      	lsls	r3, r3, #4
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007406:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a1e      	ldr	r2, [pc, #120]	; (8007484 <TIM_OC2_SetConfig+0x100>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d00f      	beq.n	8007430 <TIM_OC2_SetConfig+0xac>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a1d      	ldr	r2, [pc, #116]	; (8007488 <TIM_OC2_SetConfig+0x104>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00b      	beq.n	8007430 <TIM_OC2_SetConfig+0xac>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a1c      	ldr	r2, [pc, #112]	; (800748c <TIM_OC2_SetConfig+0x108>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d007      	beq.n	8007430 <TIM_OC2_SetConfig+0xac>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a1b      	ldr	r2, [pc, #108]	; (8007490 <TIM_OC2_SetConfig+0x10c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d003      	beq.n	8007430 <TIM_OC2_SetConfig+0xac>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a1a      	ldr	r2, [pc, #104]	; (8007494 <TIM_OC2_SetConfig+0x110>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d113      	bne.n	8007458 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007436:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800743e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	4313      	orrs	r3, r2
 800744a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	4313      	orrs	r3, r2
 8007456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	621a      	str	r2, [r3, #32]
}
 8007472:	bf00      	nop
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	feff8fff 	.word	0xfeff8fff
 8007484:	40010000 	.word	0x40010000
 8007488:	40010400 	.word	0x40010400
 800748c:	40014000 	.word	0x40014000
 8007490:	40014400 	.word	0x40014400
 8007494:	40014800 	.word	0x40014800

08007498 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	4b33      	ldr	r3, [pc, #204]	; (8007590 <TIM_OC3_SetConfig+0xf8>)
 80074c4:	4013      	ands	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0303 	bic.w	r3, r3, #3
 80074ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a28      	ldr	r2, [pc, #160]	; (8007594 <TIM_OC3_SetConfig+0xfc>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d003      	beq.n	80074fe <TIM_OC3_SetConfig+0x66>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a27      	ldr	r2, [pc, #156]	; (8007598 <TIM_OC3_SetConfig+0x100>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d10d      	bne.n	800751a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007504:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a1d      	ldr	r2, [pc, #116]	; (8007594 <TIM_OC3_SetConfig+0xfc>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00f      	beq.n	8007542 <TIM_OC3_SetConfig+0xaa>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a1c      	ldr	r2, [pc, #112]	; (8007598 <TIM_OC3_SetConfig+0x100>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00b      	beq.n	8007542 <TIM_OC3_SetConfig+0xaa>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a1b      	ldr	r2, [pc, #108]	; (800759c <TIM_OC3_SetConfig+0x104>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d007      	beq.n	8007542 <TIM_OC3_SetConfig+0xaa>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a1a      	ldr	r2, [pc, #104]	; (80075a0 <TIM_OC3_SetConfig+0x108>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d003      	beq.n	8007542 <TIM_OC3_SetConfig+0xaa>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a19      	ldr	r2, [pc, #100]	; (80075a4 <TIM_OC3_SetConfig+0x10c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d113      	bne.n	800756a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	011b      	lsls	r3, r3, #4
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	4313      	orrs	r3, r2
 800755c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	011b      	lsls	r3, r3, #4
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	4313      	orrs	r3, r2
 8007568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	621a      	str	r2, [r3, #32]
}
 8007584:	bf00      	nop
 8007586:	371c      	adds	r7, #28
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	fffeff8f 	.word	0xfffeff8f
 8007594:	40010000 	.word	0x40010000
 8007598:	40010400 	.word	0x40010400
 800759c:	40014000 	.word	0x40014000
 80075a0:	40014400 	.word	0x40014400
 80075a4:	40014800 	.word	0x40014800

080075a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	4b24      	ldr	r3, [pc, #144]	; (8007664 <TIM_OC4_SetConfig+0xbc>)
 80075d4:	4013      	ands	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	031b      	lsls	r3, r3, #12
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a19      	ldr	r2, [pc, #100]	; (8007668 <TIM_OC4_SetConfig+0xc0>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d00f      	beq.n	8007628 <TIM_OC4_SetConfig+0x80>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a18      	ldr	r2, [pc, #96]	; (800766c <TIM_OC4_SetConfig+0xc4>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d00b      	beq.n	8007628 <TIM_OC4_SetConfig+0x80>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a17      	ldr	r2, [pc, #92]	; (8007670 <TIM_OC4_SetConfig+0xc8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d007      	beq.n	8007628 <TIM_OC4_SetConfig+0x80>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a16      	ldr	r2, [pc, #88]	; (8007674 <TIM_OC4_SetConfig+0xcc>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d003      	beq.n	8007628 <TIM_OC4_SetConfig+0x80>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a15      	ldr	r2, [pc, #84]	; (8007678 <TIM_OC4_SetConfig+0xd0>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d109      	bne.n	800763c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800762e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	019b      	lsls	r3, r3, #6
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	4313      	orrs	r3, r2
 800763a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	621a      	str	r2, [r3, #32]
}
 8007656:	bf00      	nop
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	feff8fff 	.word	0xfeff8fff
 8007668:	40010000 	.word	0x40010000
 800766c:	40010400 	.word	0x40010400
 8007670:	40014000 	.word	0x40014000
 8007674:	40014400 	.word	0x40014400
 8007678:	40014800 	.word	0x40014800

0800767c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	4b21      	ldr	r3, [pc, #132]	; (800772c <TIM_OC5_SetConfig+0xb0>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	041b      	lsls	r3, r3, #16
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a18      	ldr	r2, [pc, #96]	; (8007730 <TIM_OC5_SetConfig+0xb4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d00f      	beq.n	80076f2 <TIM_OC5_SetConfig+0x76>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a17      	ldr	r2, [pc, #92]	; (8007734 <TIM_OC5_SetConfig+0xb8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00b      	beq.n	80076f2 <TIM_OC5_SetConfig+0x76>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a16      	ldr	r2, [pc, #88]	; (8007738 <TIM_OC5_SetConfig+0xbc>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d007      	beq.n	80076f2 <TIM_OC5_SetConfig+0x76>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a15      	ldr	r2, [pc, #84]	; (800773c <TIM_OC5_SetConfig+0xc0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d003      	beq.n	80076f2 <TIM_OC5_SetConfig+0x76>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a14      	ldr	r2, [pc, #80]	; (8007740 <TIM_OC5_SetConfig+0xc4>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d109      	bne.n	8007706 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	021b      	lsls	r3, r3, #8
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	4313      	orrs	r3, r2
 8007704:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	621a      	str	r2, [r3, #32]
}
 8007720:	bf00      	nop
 8007722:	371c      	adds	r7, #28
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	fffeff8f 	.word	0xfffeff8f
 8007730:	40010000 	.word	0x40010000
 8007734:	40010400 	.word	0x40010400
 8007738:	40014000 	.word	0x40014000
 800773c:	40014400 	.word	0x40014400
 8007740:	40014800 	.word	0x40014800

08007744 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4b22      	ldr	r3, [pc, #136]	; (80077f8 <TIM_OC6_SetConfig+0xb4>)
 8007770:	4013      	ands	r3, r2
 8007772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4313      	orrs	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	051b      	lsls	r3, r3, #20
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4313      	orrs	r3, r2
 8007792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a19      	ldr	r2, [pc, #100]	; (80077fc <TIM_OC6_SetConfig+0xb8>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d00f      	beq.n	80077bc <TIM_OC6_SetConfig+0x78>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a18      	ldr	r2, [pc, #96]	; (8007800 <TIM_OC6_SetConfig+0xbc>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00b      	beq.n	80077bc <TIM_OC6_SetConfig+0x78>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a17      	ldr	r2, [pc, #92]	; (8007804 <TIM_OC6_SetConfig+0xc0>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d007      	beq.n	80077bc <TIM_OC6_SetConfig+0x78>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a16      	ldr	r2, [pc, #88]	; (8007808 <TIM_OC6_SetConfig+0xc4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d003      	beq.n	80077bc <TIM_OC6_SetConfig+0x78>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a15      	ldr	r2, [pc, #84]	; (800780c <TIM_OC6_SetConfig+0xc8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d109      	bne.n	80077d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	029b      	lsls	r3, r3, #10
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	621a      	str	r2, [r3, #32]
}
 80077ea:	bf00      	nop
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	feff8fff 	.word	0xfeff8fff
 80077fc:	40010000 	.word	0x40010000
 8007800:	40010400 	.word	0x40010400
 8007804:	40014000 	.word	0x40014000
 8007808:	40014400 	.word	0x40014400
 800780c:	40014800 	.word	0x40014800

08007810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	f023 0201 	bic.w	r2, r3, #1
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800783a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f023 030a 	bic.w	r3, r3, #10
 800784c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4313      	orrs	r3, r2
 8007854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	621a      	str	r2, [r3, #32]
}
 8007862:	bf00      	nop
 8007864:	371c      	adds	r7, #28
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800786e:	b480      	push	{r7}
 8007870:	b087      	sub	sp, #28
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	f023 0210 	bic.w	r2, r3, #16
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	031b      	lsls	r3, r3, #12
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	621a      	str	r2, [r3, #32]
}
 80078c2:	bf00      	nop
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
	...

080078d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	4b09      	ldr	r3, [pc, #36]	; (8007908 <TIM_ITRx_SetConfig+0x38>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	f043 0307 	orr.w	r3, r3, #7
 80078f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	609a      	str	r2, [r3, #8]
}
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	ffcfff8f 	.word	0xffcfff8f

0800790c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
 8007918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	021a      	lsls	r2, r3, #8
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	431a      	orrs	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	4313      	orrs	r3, r2
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	609a      	str	r2, [r3, #8]
}
 8007940:	bf00      	nop
 8007942:	371c      	adds	r7, #28
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f003 031f 	and.w	r3, r3, #31
 800795e:	2201      	movs	r2, #1
 8007960:	fa02 f303 	lsl.w	r3, r2, r3
 8007964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1a      	ldr	r2, [r3, #32]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	43db      	mvns	r3, r3
 800796e:	401a      	ands	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a1a      	ldr	r2, [r3, #32]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f003 031f 	and.w	r3, r3, #31
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	fa01 f303 	lsl.w	r3, r1, r3
 8007984:	431a      	orrs	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	621a      	str	r2, [r3, #32]
}
 800798a:	bf00      	nop
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
	...

08007998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d101      	bne.n	80079b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079ac:	2302      	movs	r3, #2
 80079ae:	e077      	b.n	8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a35      	ldr	r2, [pc, #212]	; (8007aac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d004      	beq.n	80079e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a34      	ldr	r2, [pc, #208]	; (8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d108      	bne.n	80079f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80079ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a25      	ldr	r2, [pc, #148]	; (8007aac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d02c      	beq.n	8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a22:	d027      	beq.n	8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a22      	ldr	r2, [pc, #136]	; (8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d022      	beq.n	8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a21      	ldr	r2, [pc, #132]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d01d      	beq.n	8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1f      	ldr	r2, [pc, #124]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d018      	beq.n	8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a1a      	ldr	r2, [pc, #104]	; (8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d013      	beq.n	8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00e      	beq.n	8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d009      	beq.n	8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a18      	ldr	r2, [pc, #96]	; (8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d004      	beq.n	8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a17      	ldr	r2, [pc, #92]	; (8007acc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d10c      	bne.n	8007a8e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40010400 	.word	0x40010400
 8007ab4:	40000400 	.word	0x40000400
 8007ab8:	40000800 	.word	0x40000800
 8007abc:	40000c00 	.word	0x40000c00
 8007ac0:	40001800 	.word	0x40001800
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	4000e000 	.word	0x4000e000
 8007acc:	4000e400 	.word	0x4000e400

08007ad0 <__libc_init_array>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	4d0d      	ldr	r5, [pc, #52]	; (8007b08 <__libc_init_array+0x38>)
 8007ad4:	4c0d      	ldr	r4, [pc, #52]	; (8007b0c <__libc_init_array+0x3c>)
 8007ad6:	1b64      	subs	r4, r4, r5
 8007ad8:	10a4      	asrs	r4, r4, #2
 8007ada:	2600      	movs	r6, #0
 8007adc:	42a6      	cmp	r6, r4
 8007ade:	d109      	bne.n	8007af4 <__libc_init_array+0x24>
 8007ae0:	4d0b      	ldr	r5, [pc, #44]	; (8007b10 <__libc_init_array+0x40>)
 8007ae2:	4c0c      	ldr	r4, [pc, #48]	; (8007b14 <__libc_init_array+0x44>)
 8007ae4:	f000 f820 	bl	8007b28 <_init>
 8007ae8:	1b64      	subs	r4, r4, r5
 8007aea:	10a4      	asrs	r4, r4, #2
 8007aec:	2600      	movs	r6, #0
 8007aee:	42a6      	cmp	r6, r4
 8007af0:	d105      	bne.n	8007afe <__libc_init_array+0x2e>
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af8:	4798      	blx	r3
 8007afa:	3601      	adds	r6, #1
 8007afc:	e7ee      	b.n	8007adc <__libc_init_array+0xc>
 8007afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b02:	4798      	blx	r3
 8007b04:	3601      	adds	r6, #1
 8007b06:	e7f2      	b.n	8007aee <__libc_init_array+0x1e>
 8007b08:	08007b50 	.word	0x08007b50
 8007b0c:	08007b50 	.word	0x08007b50
 8007b10:	08007b50 	.word	0x08007b50
 8007b14:	08007b54 	.word	0x08007b54

08007b18 <memset>:
 8007b18:	4402      	add	r2, r0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d100      	bne.n	8007b22 <memset+0xa>
 8007b20:	4770      	bx	lr
 8007b22:	f803 1b01 	strb.w	r1, [r3], #1
 8007b26:	e7f9      	b.n	8007b1c <memset+0x4>

08007b28 <_init>:
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	bf00      	nop
 8007b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2e:	bc08      	pop	{r3}
 8007b30:	469e      	mov	lr, r3
 8007b32:	4770      	bx	lr

08007b34 <_fini>:
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b36:	bf00      	nop
 8007b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3a:	bc08      	pop	{r3}
 8007b3c:	469e      	mov	lr, r3
 8007b3e:	4770      	bx	lr
